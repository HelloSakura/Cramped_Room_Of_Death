{"version":3,"sources":["file:///E:/git/Cramped_Room_Of_Death/assets/scripts/scenes/BattleManager.ts"],"names":["_decorator","Component","Node","TileMapManager","levels","DataManager","TILE_HEIGHT","TILE_WIDTH","EventManager","ENTITY_STATE_ENUM","ENTITY_TYPE_ENUM","EVENT_ENUM","createUINode","PlayerManager","WoodenSkeletonManager","DoorManager","IronSkeletonManager","BurstManager","SpikeManager","ccclass","property","BattleManager","level","stage","onLoad","Instance","levelIndex","on","NEXT_LEVEL","_nextLevel","PLAYER_MOVE_END","_checkArrivedDoor","onDestroy","off","start","generateStage","initLevel","clearLevel","mapInfo","mapRowCount","length","mapColumnCount","Promise","all","generateTileMap","generateBurst","generateSpikes","generateDoor","generateEnemy","generatePlayer","x","playerX","y","playerY","player","doorX","doorY","state","doorState","door","DEATH","emit","destroyAllChildren","reset","setParent","node","name","tileMap","tileMapManager","addComponent","init","adaptPos","promise","bursts","forEach","burst","manger","push","playManager","PLAYER_BORN","spikes","spike","doorManager","enemies","enemy","Manger","type","SKELETON_WOODEN","disX","disY","setPosition"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nimport { TileMapManager } from '../tile/TileMapManager';\r\nimport levels, { ILevel } from '../../levels';\r\nimport DataManager from '../../runtime/DataManager';\r\nimport { TILE_HEIGHT, TILE_WIDTH } from '../tile/TileManger';\r\nimport EventManager from '../../runtime/EventManager';\r\nimport { DIRECTION_ENUM, ENTITY_STATE_ENUM, ENTITY_TYPE_ENUM, EVENT_ENUM } from '../../enums';\r\nimport { createUINode } from '../../utils';\r\nimport { PlayerManager } from '../player/PlayerManager';\r\nimport { WoodenSkeletonManager } from '../woodenSkeleton/WoodenSkeletonManager';\r\nimport { DoorManager } from '../door/DoorManager';\r\nimport { IronSkeletonManager } from '../ironSkeleton/IronSkeletonManager';\r\nimport { BurstManager } from '../burst/BurstManager';\r\nimport { SpikeManager } from '../spikes/SpikeManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BattleManager')\r\nexport class BattleManager extends Component {\r\n    level:ILevel;\r\n    stage:Node;\r\n\r\n    //\r\n    onLoad(){\r\n        DataManager.Instance.levelIndex = 12;\r\n        //绑定切换关卡\r\n        EventManager.Instance.on(EVENT_ENUM.NEXT_LEVEL, this._nextLevel, this);\r\n        EventManager.Instance.on(EVENT_ENUM.PLAYER_MOVE_END, this._checkArrivedDoor, this);\r\n    }\r\n\r\n    onDestroy(){\r\n        //解绑切换关卡\r\n        EventManager.Instance.off(EVENT_ENUM.NEXT_LEVEL, this._nextLevel)\r\n        EventManager.Instance.off(EVENT_ENUM.PLAYER_MOVE_END, this._checkArrivedDoor);\r\n    }\r\n\r\n    start() {\r\n        this.generateStage();\r\n        this.initLevel();\r\n    }\r\n\r\n    async initLevel(){\r\n        const level = levels[`level${DataManager.Instance.levelIndex}`];\r\n        if(level){\r\n            this.clearLevel();\r\n            this.level = level;\r\n            DataManager.Instance.mapInfo = this.level.mapInfo;\r\n            DataManager.Instance.mapRowCount = this.level.mapInfo.length || 0;\r\n            DataManager.Instance.mapColumnCount = this.level.mapInfo[0].length || 0;\r\n            \r\n            await Promise.all([\r\n                this.generateTileMap(),\r\n                this.generateBurst(),\r\n                this.generateSpikes(),\r\n                this.generateDoor(),\r\n                this.generateEnemy(),    \r\n            ]);\r\n            //生成player\r\n            await this.generatePlayer()\r\n            \r\n            \r\n        }\r\n    }\r\n\r\n    private _nextLevel(){\r\n        DataManager.Instance.levelIndex++;\r\n        this.initLevel();\r\n    }\r\n\r\n    //检测玩家是否到门，且敌人全部死亡\r\n    private _checkArrivedDoor(){\r\n        let {x:playerX, y:playerY} = DataManager.Instance.player;\r\n        let {x:doorX, y:doorY, state:doorState} = DataManager.Instance.door;\r\n        \r\n        if(playerX === doorX && playerY === doorY && doorState === ENTITY_STATE_ENUM.DEATH){\r\n            EventManager.Instance.emit(EVENT_ENUM.NEXT_LEVEL);\r\n        }\r\n    }\r\n\r\n    clearLevel(){\r\n        //清空数据，销毁上一关地图后再加载下一关\r\n        this.stage.destroyAllChildren();\r\n        DataManager.Instance.reset();\r\n    }\r\n\r\n    generateStage(){\r\n        //创建舞台，所有单元放在舞台上\r\n        this.stage = new Node();\r\n        this.stage.setParent(this.node);\r\n        this.stage.name = \"stage\";\r\n    }\r\n\r\n\r\n    async generateTileMap(){\r\n        //创建瓦片地图节点\r\n        let tileMap = new Node();\r\n        tileMap.setParent(this.stage);\r\n\r\n        //执行生成逻辑，放在组件上\r\n        const tileMapManager = tileMap.addComponent(TileMapManager);\r\n        await tileMapManager.init();\r\n\r\n        //地图居中\r\n        this.adaptPos();\r\n    }\r\n\r\n\r\n    async generateBurst(){\r\n        let promise = [];\r\n        this.level.bursts.forEach((burst)=>{\r\n            const node = createUINode();\r\n            node.setParent(this.stage);\r\n            const manger = node.addComponent(BurstManager);\r\n            //使用promise，避免等一个创造一个\r\n            //可以一起等待，提高资源加载速度\r\n            promise.push(manger.init(burst));\r\n            //注意名字大小写，大写是类名\r\n            DataManager.Instance.bursts.push(manger); \r\n        })\r\n\r\n        await Promise.all(promise);\r\n    }\r\n\r\n    async generatePlayer(){\r\n        const player = createUINode();\r\n        player.setParent(this.stage);\r\n        const playManager = player.addComponent(PlayerManager);\r\n        await playManager.init(this.level.player);\r\n        DataManager.Instance.player = playManager;\r\n        EventManager.Instance.emit(EVENT_ENUM.PLAYER_BORN, true);\r\n        \r\n    }\r\n\r\n    async generateSpikes(){\r\n        let promise = [];\r\n        this.level.spikes.forEach((spike)=>{\r\n            const node = createUINode();\r\n            node.setParent(this.stage);\r\n            const manger = node.addComponent(SpikeManager);\r\n            //使用promise，避免等一个创造一个\r\n            //可以一起等待，提高资源加载速度\r\n            promise.push(manger.init(spike));\r\n            //注意名字大小写，大写是类名\r\n            DataManager.Instance.spikes.push(manger); \r\n        })\r\n        await Promise.all(promise);\r\n    }\r\n    async generateDoor(){\r\n        const door = createUINode();\r\n        door.setParent(this.stage);\r\n        const doorManager = door.addComponent(DoorManager);\r\n        await doorManager.init(this.level.door);\r\n        DataManager.Instance.door = doorManager;\r\n    }\r\n\r\n    async generateEnemy(){\r\n        let promise = [];\r\n        this.level.enemies.forEach((enemy)=>{\r\n            const node = createUINode();\r\n            node.setParent(this.stage);\r\n            const Manger = enemy.type === ENTITY_TYPE_ENUM.SKELETON_WOODEN ? WoodenSkeletonManager : IronSkeletonManager;\r\n            const manger = node.addComponent(Manger);\r\n            //使用promise，避免等一个创造一个\r\n            //可以一起等待，提高资源加载速度\r\n            promise.push(manger.init(enemy));\r\n            //注意名字大小写，大写是类名\r\n            DataManager.Instance.enemies.push(manger); \r\n        })\r\n\r\n        await Promise.all(promise);\r\n    }\r\n\r\n    adaptPos(){\r\n        //将舞台置为中间位置\r\n        //解包\r\n        const {mapRowCount, mapColumnCount} = DataManager.Instance;\r\n        const disX = TILE_WIDTH * mapRowCount/2;\r\n        const disY = TILE_HEIGHT * mapColumnCount/2 + 100;\r\n        this.stage.setPosition(-disX, disY);\r\n\r\n    }\r\n}\r\n\r\n\r\n"]}