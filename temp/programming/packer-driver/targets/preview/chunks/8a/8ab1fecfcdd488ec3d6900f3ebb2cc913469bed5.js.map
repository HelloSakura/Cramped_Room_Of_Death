{"version":3,"sources":["file:///E:/git/Cramped_Room_Of_Death/assets/scripts/smoke/SmokeStateMachine.ts"],"names":["_decorator","Animation","StateMachine","getInitParamsTrigger","getInitParamsNumber","ENTITY_STATE_ENUM","PARAMS_NAME_ENUM","IdleSubStateMachine","DeadSubStateMachine","EntityManager","ccclass","property","SmokeStateMachine","init","animationComponent","addComponent","initParams","initStateMachine","initAnimationEvent","Promise","all","waitingList","params","set","IDLE","DIRECTION","DEATH","stateMachine","on","EventType","FINISHED","name","defaultClip","whiteList","some","v","includes","node","getComponent","state","run","_currentState","get","value","currentState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAA2BC,MAAAA,S,OAAAA,S;;AAC3BC,MAAAA,Y,iBAAAA,Y;AAAcC,MAAAA,oB,iBAAAA,oB;AAAsBC,MAAAA,mB,iBAAAA,mB;;AACpCC,MAAAA,iB,iBAAAA,iB;AAAmBC,MAAAA,gB,iBAAAA,gB;;AACrBC,MAAAA,mB;;AACAC,MAAAA,mB;;AACEC,MAAAA,a,iBAAAA,a;;;;;;;;;OAKH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBX,U;;mCAIjBY,iB,WADZF,OAAO,CAAC,mBAAD,C,gBAAR,MACaE,iBADb;AAAA;AAAA,wCACoD;AAE1CC,QAAAA,IAAI,GAAE;AAAA;;AAAA;AACR;AACA,YAAA,KAAI,CAACC,kBAAL,GAA0B,KAAI,CAACC,YAAL,CAAkBd,SAAlB,CAA1B;;AAEA,YAAA,KAAI,CAACe,UAAL;;AACA,YAAA,KAAI,CAACC,gBAAL,GALQ,CAMR;;;AACA,YAAA,KAAI,CAACC,kBAAL;;AACA,kBAAMC,OAAO,CAACC,GAAR,CAAY,KAAI,CAACC,WAAjB,CAAN;AARQ;AASX;;AAEDL,QAAAA,UAAU,GAAE;AACR,eAAKM,MAAL,CAAYC,GAAZ,CAAgB;AAAA;AAAA,oDAAiBC,IAAjC,EAAuC;AAAA;AAAA,6DAAvC;AACA,eAAKF,MAAL,CAAYC,GAAZ,CAAgB;AAAA;AAAA,oDAAiBE,SAAjC,EAA4C;AAAA;AAAA,2DAA5C;AACA,eAAKH,MAAL,CAAYC,GAAZ,CAAgB;AAAA;AAAA,oDAAiBG,KAAjC,EAAwC;AAAA;AAAA,6DAAxC;AACH;;AAEDT,QAAAA,gBAAgB,GAAE;AACd,eAAKU,YAAL,CAAkBJ,GAAlB,CAAsB;AAAA;AAAA,oDAAiBC,IAAvC,EAA6C;AAAA;AAAA,0DAAwB,IAAxB,CAA7C;AACA,eAAKG,YAAL,CAAkBJ,GAAlB,CAAsB;AAAA;AAAA,oDAAiBG,KAAvC,EAA8C;AAAA;AAAA,0DAAwB,IAAxB,CAA9C;AACH;;AAGDR,QAAAA,kBAAkB,GAAE;AAChB;AACA,eAAKJ,kBAAL,CAAwBc,EAAxB,CAA2B3B,SAAS,CAAC4B,SAAV,CAAoBC,QAA/C,EAAyD,MAAI;AACzD,gBAAMC,IAAI,GAAG,KAAKjB,kBAAL,CAAwBkB,WAAxB,CAAoCD,IAAjD;AACA,gBAAME,SAAS,GAAG,CAAC,MAAD,CAAlB;;AACA,gBAAGA,SAAS,CAACC,IAAV,CAAeC,CAAC,IAAIJ,IAAI,CAACK,QAAL,CAAcD,CAAd,CAApB,CAAH,EAAyC;AACrC,mBAAKE,IAAL,CAAUC,YAAV;AAAA;AAAA,kDAAsCC,KAAtC,GAA8C;AAAA;AAAA,0DAAkBb,KAAhE;AACH;AACJ,WAND;AAOH;;AAGDc,QAAAA,GAAG,GAAE;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AAEQ,kBAAO,KAAKC,aAAZ;AACI,iBAAK,KAAKd,YAAL,CAAkBe,GAAlB,CAAsB;AAAA;AAAA,sDAAiBlB,IAAvC,CAAL;AACA,iBAAK,KAAKG,YAAL,CAAkBe,GAAlB,CAAsB;AAAA;AAAA,sDAAiBhB,KAAvC,CAAL;AACI,kBAAG,KAAKJ,MAAL,CAAYoB,GAAZ,CAAgB;AAAA;AAAA,wDAAiBhB,KAAjC,EAAwCiB,KAA3C,EAAiD;AAC7C,qBAAKC,YAAL,GAAoB,KAAKjB,YAAL,CAAkBe,GAAlB,CAAsB;AAAA;AAAA,0DAAiBhB,KAAvC,CAApB;AACH,eAFD,MAGK,IAAG,KAAKJ,MAAL,CAAYoB,GAAZ,CAAgB;AAAA;AAAA,wDAAiBlB,IAAjC,EAAuCmB,KAA1C,EAAgD;AACjD,qBAAKC,YAAL,GAAoB,KAAKjB,YAAL,CAAkBe,GAAlB,CAAsB;AAAA;AAAA,0DAAiBlB,IAAvC,CAApB;AACH,eAFI,MAGD;AACA,qBAAKoB,YAAL,GAAoB,KAAKA,YAAzB;AACH;;AACD;;AACJ;AACI,mBAAKA,YAAL,GAAoB,KAAKjB,YAAL,CAAkBe,GAAlB,CAAsB;AAAA;AAAA,wDAAiBlB,IAAvC,CAApB;AAdR;AAgBH;;AA9D+C,O","sourcesContent":["import { _decorator, AnimationClip, Animation, Component, SpriteFrame} from 'cc';\r\nimport { StateMachine, getInitParamsTrigger, getInitParamsNumber } from '../../base/StateMachine';\r\nimport { ENTITY_STATE_ENUM, PARAMS_NAME_ENUM } from '../../enums';\r\nimport IdleSubStateMachine from './IdleSubStateMachine';\r\nimport DeadSubStateMachine from './DeadSubStateMachine';\r\nimport { EntityManager } from '../../base/EntityManager';\r\n\r\n\r\n\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n@ccclass('SmokeStateMachine')\r\nexport class SmokeStateMachine extends StateMachine {\r\n\r\n    async init(){\r\n        //添加animation组件\r\n        this.animationComponent = this.addComponent(Animation);\r\n\r\n        this.initParams();\r\n        this.initStateMachine();\r\n        //等待所有资源加载完毕，才结束init\r\n        this.initAnimationEvent();\r\n        await Promise.all(this.waitingList);\r\n    }\r\n\r\n    initParams(){\r\n        this.params.set(PARAMS_NAME_ENUM.IDLE, getInitParamsTrigger());\r\n        this.params.set(PARAMS_NAME_ENUM.DIRECTION, getInitParamsNumber());\r\n        this.params.set(PARAMS_NAME_ENUM.DEATH, getInitParamsTrigger());\r\n    }\r\n\r\n    initStateMachine(){\r\n        this.stateMachine.set(PARAMS_NAME_ENUM.IDLE, new IdleSubStateMachine(this));\r\n        this.stateMachine.set(PARAMS_NAME_ENUM.DEATH, new DeadSubStateMachine(this));\r\n    }\r\n\r\n\r\n    initAnimationEvent(){\r\n        //注册动画播放结束事件，检测\r\n        this.animationComponent.on(Animation.EventType.FINISHED, ()=>{\r\n            const name = this.animationComponent.defaultClip.name;\r\n            const whiteList = ['idle'];\r\n            if(whiteList.some(v => name.includes(v))){\r\n                this.node.getComponent(EntityManager).state = ENTITY_STATE_ENUM.DEATH;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    run(){\r\n        /*\r\n        1.判断一下当前是什么状态；\r\n        2.如果当前处于某个状态，接下来判断参数列表；\r\n        3.如果某个触发器处于触发状态，那么就需要进行状态的改变，就从对应状态机列表那里取到对应的\r\n            状态机，并设置当前状态为改变后的状态\r\n        4.使用set方式，可以在set里面调用当前状态的run方法走对应的逻辑\r\n\r\n         */\r\n        switch(this._currentState){\r\n            case this.stateMachine.get(PARAMS_NAME_ENUM.IDLE):\r\n            case this.stateMachine.get(PARAMS_NAME_ENUM.DEATH):\r\n                if(this.params.get(PARAMS_NAME_ENUM.DEATH).value){\r\n                    this.currentState = this.stateMachine.get(PARAMS_NAME_ENUM.DEATH);\r\n                }\r\n                else if(this.params.get(PARAMS_NAME_ENUM.IDLE).value){\r\n                    this.currentState = this.stateMachine.get(PARAMS_NAME_ENUM.IDLE);\r\n                }\r\n                else{\r\n                    this.currentState = this.currentState;\r\n                }\r\n                break;\r\n            default:\r\n                this.currentState = this.stateMachine.get(PARAMS_NAME_ENUM.IDLE);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}