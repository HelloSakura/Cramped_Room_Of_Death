{"version":3,"sources":["file:///E:/git/Cramped_Room_Of_Death/assets/scripts/spikes/SpikeManager.ts"],"names":["_decorator","Component","Sprite","UITransform","ENTITY_STATE_ENUM","EVENT_ENUM","PARAMS_NAME_ENUM","SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM","randomByLen","TILE_WIDTH","TILE_HEIGHT","SpikeStateMachine","EventManager","DataManager","ccclass","property","SpikeManager","id","x","y","fsm","_curCount","_totalCount","type","CurCount","newCount","setParams","SPIKES_CUR_COUNT","TotalCount","SPIKES_TOTAL_COUNT","init","params","sprite","addComponent","sizeMode","SizeMode","CUSTOM","transform","getComponent","setContentSize","count","Instance","on","PLAYER_MOVE_END","_onLoop","update","node","setPosition","onDestroy","off","onAttack","backZero","player","playerX","playerY","emit","ATTACK_PLAYER","DEATH"],"mappings":"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","sourcesContent":["import { _decorator, Component, Sprite, UITransform } from 'cc';\r\nimport { StateMachine } from '../../base/StateMachine';\r\nimport { ENTITY_STATE_ENUM, ENTITY_TYPE_ENUM, EVENT_ENUM, PARAMS_NAME_ENUM, SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM } from '../../enums';\r\nimport { ISpikes } from '../../levels';\r\nimport { randomByLen } from '../../utils';\r\nimport { TILE_WIDTH, TILE_HEIGHT } from '../tile/TileManger';\r\nimport { SpikeStateMachine } from './SpikeStateMachine';\r\nimport EventManager from '../../runtime/EventManager';\r\nimport DataManager from '../../runtime/DataManager';\r\n\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SpikeManager')\r\nexport class SpikeManager extends Component {\r\n    id:string = randomByLen(12);\r\n    x:number = 0;\r\n    y:number = 0;\r\n\r\n    //状态机\r\n    fsm: StateMachine;\r\n\r\n    private _curCount:number;\r\n    private _totalCount:number;\r\n    private type:ENTITY_TYPE_ENUM;\r\n\r\n    get CurCount(){\r\n        return this._curCount;\r\n    }\r\n\r\n    set CurCount(newCount: number){\r\n        this._curCount = newCount;\r\n        this.fsm.setParams(PARAMS_NAME_ENUM.SPIKES_CUR_COUNT, newCount);\r\n    }\r\n\r\n    get TotalCount(){\r\n        return this._totalCount;\r\n    }\r\n\r\n    set TotalCount(newCount: number){\r\n        this._totalCount = newCount;\r\n        this.fsm.setParams(PARAMS_NAME_ENUM.SPIKES_TOTAL_COUNT, newCount);\r\n    }\r\n\r\n\r\n    async init(params: ISpikes){\r\n        //动画模块\r\n        //添加一个spite组件\r\n        const sprite = this.addComponent(Sprite); \r\n        //设置为custom模式，可以自定义宽高\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM;\r\n        //设置宽高\r\n        const transform = this.getComponent(UITransform);\r\n        transform.setContentSize(TILE_WIDTH*4, TILE_HEIGHT*4);\r\n\r\n        //添加状态机\r\n        this.fsm = this.addComponent(SpikeStateMachine);\r\n        await this.fsm.init();\r\n        this.x = params.x;\r\n        this.y = params.y;\r\n        this.type = params.type;\r\n        this.TotalCount = SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM[this.type]\r\n        this.CurCount = params.count;\r\n\r\n        //监听移动事件，改变尖刺数量\r\n        EventManager.Instance.on(EVENT_ENUM.PLAYER_MOVE_END, this._onLoop, this);\r\n    }\r\n\r\n    update(){\r\n        //虚拟坐标转换为瓦片坐标\r\n        //瓦片地图左上角为原点\r\n        //注意人物大小与瓦片之间的偏移\r\n        this.node.setPosition(this.x * TILE_WIDTH - TILE_WIDTH * 1.5, -this.y * TILE_HEIGHT + TILE_HEIGHT * 1.5);\r\n    }\r\n\r\n    onDestroy(): void {\r\n        EventManager.Instance.off(EVENT_ENUM.PLAYER_MOVE_END, this._onLoop);\r\n    }\r\n\r\n    private _onLoop(){\r\n        if(this.CurCount == this.TotalCount){\r\n            this.CurCount = 1;\r\n        }\r\n        else{\r\n            this.CurCount++;\r\n        }\r\n        this.onAttack();\r\n    }\r\n\r\n    //播放的次数回到零\r\n    public backZero(){\r\n        if(this._curCount == this._totalCount){\r\n            this.CurCount = 1;\r\n        }\r\n        else{\r\n            this.CurCount = 0;\r\n        }\r\n        this.onAttack();\r\n    }\r\n\r\n    onAttack(){\r\n        if(!DataManager.Instance.player) return;\r\n        const {x:playerX, y:playerY} = DataManager.Instance.player;\r\n        if(this.x === playerX && this.y === playerY && this.CurCount == this.TotalCount){\r\n            EventManager.Instance.emit(EVENT_ENUM.ATTACK_PLAYER, ENTITY_STATE_ENUM.DEATH);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}