{"version":3,"sources":["file:///E:/git/Cramped_Room_Of_Death/assets/scripts/player/PlayerManager.ts"],"names":["_decorator","CONTROLLER_ENUM","DIRECTION_ENUM","ENTITY_STATE_ENUM","EVENT_ENUM","EventManager","PlayerStateMachine","EntityManager","DataManager","ccclass","property","PlayerManager","targetX","targetY","_speed","_isMoving","init","params","fsm","addComponent","x","y","Instance","on","PLAYER_CTRL","inputHandle","ATTACK_PLAYER","_onDead","update","updateXY","Math","abs","emit","PLAYER_MOVE_END","inputDirection","state","DEATH","AIRDEATH","ATTACK","id","_willAttack","ATTACK_ENEMY","DOOR_OPEN","willBlock","console","log","move","enemies","filter","enemy","i","length","enemyX","enemyY","enemyId","direction","TOP","LEFT","RIGHT","BOTTOM","type","TURNLEFT","TURNRIGHT","tileInfo","doorX","doorY","doorState","door","bursts","burst","playerNextY","BLOCKFRONT","weaponNextY","playerTile","weaponTile","burstX","burstY","turnable","moveable","BLOCKLEFT","weaponNextX","BLOCKBACK","BLOCKRIGHT","playerNextX","nextX","nextY","BLOCKTURNLEFT","BLOCKTURNRIGHT"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Sprite, UITransform, Animation, AnimationClip, animation, SpriteFrame } from 'cc';\r\nimport { TILE_HEIGHT, TILE_WIDTH, TileManger } from '../tile/TileManger';\r\nimport ResourceManager from '../../runtime/ResourceManager';\r\nimport { CONTROLLER_ENUM, DIRECTION_ENUM, DIRECTION_ORDER_ENUM, ENTITY_STATE_ENUM, ENTITY_TYPE_ENUM, EVENT_ENUM, PARAMS_NAME_ENUM } from '../../enums';\r\nimport EventManager from '../../runtime/EventManager';\r\nimport { PlayerStateMachine } from './PlayerStateMachine';\r\nimport { EntityManager } from '../../base/EntityManager';\r\nimport DataManager from '../../runtime/DataManager';\r\nimport { IEntity } from '../../levels';\r\nimport { EnemyManager } from '../../base/EnemyManager';\r\nimport { BurstManager } from '../burst/BurstManager';\r\nlet { ccclass, property } = _decorator;\r\n\r\n\r\n\r\n\r\n@ccclass('PlayerManager')\r\nexport class PlayerManager extends EntityManager {\r\n\r\n    targetX:number = 0;\r\n    targetY:number = 0;\r\n    private  readonly _speed = 1/10;\r\n    private _isMoving:boolean = false;\r\n\r\n\r\n    async init(params: IEntity){   \r\n        //添加状态机\r\n        this.fsm = this.addComponent(PlayerStateMachine);\r\n        await this.fsm.init();\r\n        super.init(params);\r\n\r\n        this.targetX = this.x;\r\n        this.targetY = this.y;\r\n\r\n        //await this.render();\r\n        //move函数和EVENT_ENUM.PLAYER_CTRL信号绑定到了一起\r\n        EventManager.Instance.on(EVENT_ENUM.PLAYER_CTRL, this.inputHandle, this);\r\n        EventManager.Instance.on(EVENT_ENUM.ATTACK_PLAYER, this._onDead, this);\r\n    }\r\n\r\n    update(){\r\n        this.updateXY();\r\n        //虚拟坐标转换为瓦片坐标\r\n        //瓦片地图左上角为原点\r\n        //注意人物大小与瓦片之间的偏移\r\n        super.update();\r\n    }\r\n\r\n    updateXY(){\r\n        if(this.targetX < this.x){  //在目标右侧\r\n            this.x -= this._speed;  //向左移动\r\n        }\r\n        else if(this.targetX > this.x){\r\n            this.x += this._speed;\r\n        }\r\n\r\n        if(this.targetY < this.y){  //在目标上侧\r\n            this.y -= this._speed;  //向下移动\r\n        }\r\n        else if(this.targetY > this.y){\r\n            this.y += this._speed;\r\n        }\r\n\r\n        //达到一定距离直接赋值，防止鬼畜\r\n        if(Math.abs(this.targetX - this.x) <= 0.1 && Math.abs(this.targetY - this.y) <= 0.1 && this._isMoving){\r\n            this._isMoving = false;\r\n            this.x = this.targetX;\r\n            this.y = this.targetY;\r\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\r\n        }\r\n    }\r\n\r\n\r\n    //处理用户输入\r\n    inputHandle(inputDirection: CONTROLLER_ENUM){\r\n        //正在移动return\r\n        if(this._isMoving){\r\n            return;\r\n        }\r\n        //人物死亡return掉\r\n        if(this.state === ENTITY_STATE_ENUM.DEATH \r\n        || this.state === ENTITY_STATE_ENUM.AIRDEATH \r\n        || this.state === ENTITY_STATE_ENUM.ATTACK\r\n        ){\r\n            return;\r\n        }\r\n\r\n        //判断攻击敌人\r\n        let id = this._willAttack(inputDirection)\r\n        if(id){\r\n            EventManager.Instance.emit(EVENT_ENUM.ATTACK_ENEMY, id);\r\n            EventManager.Instance.emit(EVENT_ENUM.DOOR_OPEN);\r\n            return;\r\n        }\r\n        //撞了不用往下走了\r\n        if(this.willBlock(inputDirection)){\r\n            console.log(\"block\");\r\n            return; \r\n        }\r\n        this.move(inputDirection);\r\n\r\n    }\r\n\r\n    private _willAttack(inputDirection:CONTROLLER_ENUM):boolean{\r\n        let enemies = DataManager.Instance.enemies.filter(enemy => enemy.state !== ENTITY_STATE_ENUM.DEATH);\r\n        for (let i = 0; i < enemies.length; i++) {\r\n            let {x:enemyX, y:enemyY, id:enemyId} = enemies[i];\r\n            if(this.direction === DIRECTION_ENUM.TOP\r\n            && inputDirection === CONTROLLER_ENUM.TOP\r\n            && enemyX === this.x\r\n            && enemyY === this.targetY - 2\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.ATTACK;\r\n                return enemyId;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.LEFT\r\n            && inputDirection === CONTROLLER_ENUM.LEFT\r\n            && enemyX === this.x - 2\r\n            && enemyY === this.targetY\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.ATTACK;\r\n                return enemyId;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.RIGHT\r\n            && inputDirection === CONTROLLER_ENUM.RIGHT\r\n            && enemyX === this.x + 2\r\n            && enemyY === this.targetY\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.ATTACK;\r\n                return enemyId;\r\n            }\r\n            if(this.direction === DIRECTION_ENUM.BOTTOM\r\n            && inputDirection === CONTROLLER_ENUM.BOTTOM\r\n            && enemyX === this.x\r\n            && enemyY === this.targetY + 2\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.ATTACK;\r\n                return enemyId;\r\n            }\r\n        \r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _onDead(type:ENTITY_STATE_ENUM){\r\n        this.state = type;\r\n    }\r\n\r\n    move(inputDirection: CONTROLLER_ENUM){\r\n        \r\n        //console.log(DataManager.Instance.tileInfo);\r\n        //注意Y轴是相反的\r\n        if(inputDirection === CONTROLLER_ENUM.TOP){\r\n            this.targetY -=1;\r\n            this._isMoving = true;\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.BOTTOM){\r\n            this.targetY +=1;\r\n            this._isMoving = true;\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.RIGHT){\r\n            this.targetX +=1;\r\n            this._isMoving = true;\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.LEFT){\r\n            this.targetX -=1;\r\n            this._isMoving = true;\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\r\n            //左转后进入该逻辑\r\n            //左转后人物方向改变了\r\n            if(this.direction === DIRECTION_ENUM.TOP){\r\n                this.direction = DIRECTION_ENUM.LEFT;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.LEFT){\r\n                this.direction = DIRECTION_ENUM.BOTTOM;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.BOTTOM){\r\n                this.direction = DIRECTION_ENUM.RIGHT;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.RIGHT){\r\n                this.direction = DIRECTION_ENUM.TOP;\r\n            }\r\n            this.state = ENTITY_STATE_ENUM.TURNLEFT;\r\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.TURNRIGHT){\r\n            if(this.direction === DIRECTION_ENUM.TOP){\r\n                this.direction = DIRECTION_ENUM.RIGHT;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.RIGHT){\r\n                this.direction = DIRECTION_ENUM.BOTTOM;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.BOTTOM){\r\n                this.direction = DIRECTION_ENUM.LEFT;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.LEFT){\r\n                this.direction = DIRECTION_ENUM.TOP;\r\n            }\r\n            this.state = ENTITY_STATE_ENUM.TURNRIGHT;\r\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\r\n        }\r\n    }\r\n\r\n\r\n    //判断是否撞墙了\r\n    willBlock(inputDirection: CONTROLLER_ENUM):boolean{\r\n        //解构出自己数据\r\n        let {targetX:x, targetY:y, direction} = this;\r\n        //解构出地图信息\r\n        let {tileInfo} = DataManager.Instance;\r\n        //解构出门的信息\r\n        let {x:doorX, y:doorY, state:doorState} = DataManager.Instance.door;\r\n        //解构出未死亡的敌人信息\r\n        let enemies:EnemyManager[] = DataManager.Instance.enemies.filter(enemy=>enemy.state !== ENTITY_STATE_ENUM.DEATH);\r\n        //解构出地裂信息\r\n        let bursts:BurstManager[] = DataManager.Instance.bursts.filter(burst=>burst.state !== ENTITY_STATE_ENUM.DEATH);\r\n\r\n        \r\n        if(inputDirection === CONTROLLER_ENUM.TOP){\r\n            //输入方向为上\r\n            //拿到下一个y坐标(用二维坐标来表示角色位置而不是position)\r\n            let playerNextY = y - 1;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                //人当前方向也是上\r\n                //往上直接遇到墙\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n\r\n                //拿到下两个瓦片，一个是人物，一个是枪，总不能枪怼墙上\r\n                let weaponNextY = y - 2;\r\n                let playerTile = tileInfo[x][playerNextY];\r\n                let weaponTile = tileInfo[x][weaponNextY];\r\n\r\n                //判断是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY)|| (x === doorX && weaponNextY === doorY))\r\n                && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;    \r\n                }\r\n\r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)\r\n                    || (x === enemyX && weaponNextY === enemyY)\r\n                    ){\r\n                            this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                            return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                //判断地图元素\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人能走 且 枪能走，要么瓦片不存在要么瓦片可以转动\r\n                    //empty\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                //当前方向为左\r\n                //需要三个瓦片，左上角\r\n                \r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return;\r\n                }\r\n\r\n                //拿到下两个瓦片\r\n                //这个时候枪是横向左，人可能不被挡住，但是枪会\r\n                let weaponNextX = x - 1;\r\n                let playerTile = tileInfo[x][playerNextY];\r\n                let weaponTile = tileInfo[weaponNextX][playerNextY];\r\n\r\n                //是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY) || (weaponNextX === doorX && playerNextY === doorY))\r\n                && doorState != ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n                \r\n                //是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY) || (weaponNextX === enemyX && playerNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                        return true;\r\n                    }\r\n                }\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人能走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    //待定\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                //当前方向为下\r\n                //只需要下一个瓦片可走就行\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return;\r\n                }\r\n                //拿到瓦片\r\n                let playerTile = tileInfo[x][playerNextY];\r\n                //是否碰到了门\r\n                if((x === doorX && playerNextY === doorY) && doorState != ENTITY_STATE_ENUM.DEATH){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n    \r\n                //是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if(x === enemyX && playerNextY === enemyY){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if(x === burstX && playerNextY === burstY){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n\r\n                if(playerTile && playerTile.moveable){\r\n                    //人能走就行\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                //当前方向为右\r\n                //需要三个瓦片，右上角\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return;\r\n                }\r\n\r\n                let weaponNextX = x + 1;\r\n                let playerTile = tileInfo[x][playerNextY];\r\n                let weaponTile = tileInfo[weaponNextX][playerNextY];\r\n\r\n                //是否碰到了门\r\n                if((x === doorX && playerNextY === doorY) && doorState != ENTITY_STATE_ENUM.DEATH){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n    \r\n                //是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)\r\n                    || (weaponNextX === enemyX && playerNextY === enemyY)\r\n                    ){\r\n                            this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                            return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.moveable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n\r\n                \r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.moveable)){\r\n                    //人物：下一个瓦片且可移动\r\n                    //枪：不存在或能转动\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.LEFT){\r\n            //输入方向为左\r\n            let playerNextX = x - 1;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                //人物方向为上\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return;\r\n                }\r\n                let weaponNextY = y - 1;\r\n                let playerTile = tileInfo[playerNextX][y];\r\n                let weaponTile = tileInfo[playerNextX][weaponNextY]\r\n                //判断是否碰到了门\r\n                if(((playerNextX === doorX && y === doorY)|| (x === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY) || (x === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.moveable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.moveable)){\r\n                    //人：能走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                //人物方向为左\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return;\r\n                }\r\n                let weaponNextX = x - 2;\r\n                let playerTile = tileInfo[playerNextX][y];\r\n                let weaponTile = tileInfo[weaponNextX][y];\r\n\r\n                if(((playerNextX === doorX && y === doorY)|| (weaponNextX === doorX && y === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (weaponNextX === enemyX && y === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                        return true;    \r\n                    }\r\n                }\r\n                \r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.moveable)){\r\n                        return false;\r\n                    }\r\n                }\r\n                \r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.moveable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                //人物方向为下\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return;\r\n                }\r\n                let weaponNextY = y + 1;\r\n                let playerTile:TileManger = tileInfo[playerNextX][y];\r\n                let weaponTile:TileManger = tileInfo[playerNextX][weaponNextY];\r\n                if(((playerNextX === doorX && y === doorY)|| (playerNextX === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (playerNextX === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                        return true;    \r\n                    }\r\n                }\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.moveable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.moveable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                //人物方向为右\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return;\r\n                }\r\n\r\n                let playerTile = tileInfo[playerNextX][y];\r\n                if((playerNextX === doorX && y === doorY) && doorState !== ENTITY_STATE_ENUM.DEATH){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if(playerNextX === enemyX && y === enemyY){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.BOTTOM){\r\n            //输入方向向下\r\n            let playerNextY:number = y + 1;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                //人物向上\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return;\r\n                }\r\n                \r\n                let playerTile = tileInfo[x][playerNextY];\r\n                //判断是否碰到了门\r\n                if((x === doorX && playerNextY === doorY)\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if(x === enemyX && playerNextY === enemyY){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if(x === burstX && playerNextY === burstY){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                //人物向左\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return;\r\n                }\r\n                let weaponNextX = x - 1;\r\n                let playerTile = tileInfo[x][playerNextY];\r\n                let weaponTile = tileInfo[weaponNextX][playerNextY];\r\n                //判断是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY)|| (weaponNextX === doorX && playerNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)|| (weaponNextX === enemyX && playerNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.moveable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.moveable)){\r\n                    //人可走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                //人物向下\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return;\r\n                }\r\n                let weaponNextY:number = y + 2;\r\n                let playerTile:TileManger = tileInfo[x][playerNextY];\r\n                let weaponTile:TileManger = tileInfo[x][weaponNextY];\r\n\r\n                //判断是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY)|| (x === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)|| (x === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.moveable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.moveable)){\r\n                    //人可走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                //人物向右\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return;\r\n                }\r\n                let weaponNextX = x + 1;\r\n                let playerTile = tileInfo[x][playerNextY];\r\n                let weaponTile = tileInfo[weaponNextX][playerNextY];\r\n                //判断是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY)|| (weaponNextX === doorX && playerNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)|| (weaponNextX === enemyX && playerNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.moveable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.moveable)){\r\n                    //人可走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.RIGHT){\r\n            //输入方向向右\r\n            let playerNextX = x + 1;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                //人物向上\r\n                \r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return;\r\n                }\r\n                let weaponNextY = y - 1;\r\n                let playerTile = tileInfo[playerNextX][y];\r\n                let weaponTile = tileInfo[playerNextX][weaponNextY];\r\n                //判断是否碰到了门\r\n                if(((playerNextX === doorX && y === doorY)|| (playerNextX === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (playerNextX === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.moveable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.moveable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                //人物向左\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return;\r\n                }\r\n                let playerTile = tileInfo[playerNextX][y];\r\n                //判断是否碰到了门\r\n                if((playerNextX === doorX && y === doorY)\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if(playerNextX === enemyX && y === enemyY){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if(playerNextX === burstX && y === burstY){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n\r\n                if(playerTile && playerTile.moveable){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                //人物向下\r\n                \r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return;\r\n                }\r\n                let weaponNextY = y + 1;\r\n                let playerTile = tileInfo[playerNextX][y];\r\n                let weaponTile = tileInfo[playerNextX][weaponNextY];\r\n                //判断是否碰到了门\r\n                if(((playerNextX === doorX && y === doorY)|| (playerNextX === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (playerNextX === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                        return true;    \r\n                    }\r\n                }\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.moveable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.moveable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                //人物向右\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return;\r\n                }\r\n                let weaponNextX = x + 2;\r\n                let playerTile = tileInfo[playerNextX][y];\r\n                let weaponTile = tileInfo[weaponNextX][y];\r\n                //判断是否碰到了门\r\n                if(((playerNextX === doorX && y === doorY)|| (weaponNextX === doorX && y === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (weaponNextX === enemyX && y === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.moveable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.moveable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\r\n            //输入方向向左转\r\n            //需要判断三个瓦片\r\n            let nextX;\r\n            let nextY;\r\n\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                nextX = x - 1;\r\n                nextY = y - 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                nextX = x + 1;\r\n                nextY = y + 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                nextX = x - 1;\r\n                nextY = y + 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                nextX = x + 1;\r\n                nextY = y - 1;\r\n            }\r\n\r\n            //判断是否碰到了门\r\n            if(((x === doorX && nextY === doorY) || (nextX === doorX && y === doorY) || (nextX === doorX && nextY === doorY))\r\n                && doorState !== ENTITY_STATE_ENUM.DEATH\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\r\n                return true;  \r\n            }\r\n\r\n            //判断是否碰到了敌人\r\n            for(let i = 0; i < enemies.length; ++i){\r\n                let {x:enemyX, y:enemyY} = enemies[i];\r\n                if((x === enemyX && nextY === enemyY) || (nextX === enemyX && y === enemyY) || (nextX === enemyX && nextY === enemyY)){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\r\n                    return true;    \r\n                }\r\n            }\r\n\r\n            \r\n\r\n            if(\r\n                   (!tileInfo[x][nextY] || tileInfo[x][nextY].turnable)\r\n                && (!tileInfo[nextX][y] || tileInfo[nextX][y].turnable)\r\n                && (!tileInfo[nextX][nextY] || tileInfo[nextX][nextY].turnable)\r\n            ){\r\n                //empty\r\n            }\r\n            else{\r\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.TURNRIGHT){\r\n            //输入方向向左转\r\n            //需要判断三个瓦片\r\n            let nextX;\r\n            let nextY;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                nextX = x + 1;\r\n                nextY = y - 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                nextX = x - 1;\r\n                nextY = y + 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                nextX = x - 1;\r\n                nextY = y - 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                nextX = x + 1;\r\n                nextY = y + 1;\r\n            }\r\n\r\n            //判断是否碰到了门\r\n            if(((x === doorX && nextY === doorY) || (nextX === doorX && y === doorY) || (nextX === doorX && nextY === doorY))\r\n                && doorState !== ENTITY_STATE_ENUM.DEATH\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT;\r\n                return true;  \r\n            }\r\n\r\n            //判断是否碰到了敌人\r\n            for(let i = 0; i < enemies.length; ++i){\r\n                let {x:enemyX, y:enemyY} = enemies[i];\r\n                if((x === enemyX && nextY === enemyY) || (nextX === enemyX && y === enemyY) || (nextX === enemyX && nextY === enemyY)){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT;\r\n                    return true;    \r\n                }\r\n            }\r\n\r\n            if(\r\n                   (!tileInfo[x][nextY] || tileInfo[x][nextY].turnable)\r\n                && (!tileInfo[nextX][y] || tileInfo[nextX][y].turnable)\r\n                && (!tileInfo[nextX][nextY] || tileInfo[nextX][nextY].turnable)\r\n            ){\r\n                //empty\r\n            }\r\n            else{\r\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT;\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n"]}