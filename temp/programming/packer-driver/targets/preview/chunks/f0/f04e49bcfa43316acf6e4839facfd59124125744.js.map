{"version":3,"sources":["file:///E:/git/Cramped_Room_Of_Death/assets/scripts/player/PlayerManager.ts"],"names":["_decorator","CONTROLLER_ENUM","DIRECTION_ENUM","ENTITY_STATE_ENUM","EVENT_ENUM","SHAKE_TYPE_ENUM","EventManager","PlayerStateMachine","EntityManager","DataManager","ccclass","property","PlayerManager","targetX","targetY","_speed","_isMoving","init","params","fsm","addComponent","x","y","Instance","on","PLAYER_CTRL","inputHandle","ATTACK_PLAYER","_onDead","update","updateXY","onDestroy","off","Math","abs","emit","PLAYER_MOVE_END","inputDirection","state","DEATH","AIRDEATH","ATTACK","id","_willAttack","RECORD_STEP","ATTACK_ENEMY","DOOR_OPEN","willBlock","console","log","TOP","SCREEN_SHAKE","LEFT","RIGHT","BOTTOM","TURNLEFT","direction","TURNRIGHT","move","enemies","filter","enemy","i","length","enemyX","enemyY","enemyId","type","_showSmoke","tileInfo","doorX","doorY","doorState","door","bursts","burst","playerNextY","BLOCKFRONT","weaponNextY","playerTile","weaponTile","burstX","burstY","turnable","moveable","BLOCKLEFT","weaponNextX","BLOCKBACK","BLOCKRIGHT","playerNextX","nextX","nextY","BLOCKTURNLEFT","BLOCKTURNRIGHT","SHOW_SMOKE","onAttackShake"],"mappings":"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","sourcesContent":["import { _decorator } from 'cc';\r\nimport { TileManger } from '../tile/TileManger';\r\nimport { CONTROLLER_ENUM, DIRECTION_ENUM, ENTITY_STATE_ENUM, EVENT_ENUM, SHAKE_TYPE_ENUM } from '../../enums';\r\nimport EventManager from '../../runtime/EventManager';\r\nimport { PlayerStateMachine } from './PlayerStateMachine';\r\nimport { EntityManager } from '../../base/EntityManager';\r\nimport DataManager from '../../runtime/DataManager';\r\nimport { IEntity } from '../../levels';\r\nimport { EnemyManager } from '../../base/EnemyManager';\r\nimport { BurstManager } from '../burst/BurstManager';\r\nlet { ccclass, property } = _decorator;\r\n\r\n\r\n\r\n\r\n@ccclass('PlayerManager')\r\nexport class PlayerManager extends EntityManager {\r\n\r\n    targetX:number = 0;\r\n    targetY:number = 0;\r\n    private  readonly _speed = 1/10;\r\n    private _isMoving:boolean = false;\r\n\r\n\r\n    async init(params: IEntity){   \r\n        //添加状态机\r\n        this.fsm = this.addComponent(PlayerStateMachine);\r\n        await this.fsm.init();\r\n        super.init(params);\r\n\r\n        this.targetX = this.x;\r\n        this.targetY = this.y;\r\n\r\n        //await this.render();\r\n        //move函数和EVENT_ENUM.PLAYER_CTRL信号绑定到了一起\r\n        EventManager.Instance.on(EVENT_ENUM.PLAYER_CTRL, this.inputHandle, this);\r\n        EventManager.Instance.on(EVENT_ENUM.ATTACK_PLAYER, this._onDead, this);\r\n    }\r\n\r\n    update(){\r\n        this.updateXY();\r\n        //虚拟坐标转换为瓦片坐标\r\n        //瓦片地图左上角为原点\r\n        //注意人物大小与瓦片之间的偏移\r\n        super.update();\r\n    }\r\n    \r\n    onDestroy(): void {\r\n        super.onDestroy();\r\n        EventManager.Instance.off(EVENT_ENUM.PLAYER_CTRL, this.inputHandle);\r\n        EventManager.Instance.off(EVENT_ENUM.ATTACK_PLAYER, this._onDead);\r\n    }\r\n    updateXY(){\r\n        if(this.targetX < this.x){  //在目标右侧\r\n            this.x -= this._speed;  //向左移动\r\n        }\r\n        else if(this.targetX > this.x){\r\n            this.x += this._speed;\r\n        }\r\n\r\n        if(this.targetY < this.y){  //在目标上侧\r\n            this.y -= this._speed;  //向下移动\r\n        }\r\n        else if(this.targetY > this.y){\r\n            this.y += this._speed;\r\n        }\r\n\r\n        //达到一定距离直接赋值，防止鬼畜\r\n        if(Math.abs(this.targetX - this.x) <= 0.1 && Math.abs(this.targetY - this.y) <= 0.1 && this._isMoving){\r\n            this._isMoving = false;\r\n            this.x = this.targetX;\r\n            this.y = this.targetY;\r\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\r\n        }\r\n    }\r\n\r\n\r\n    //处理用户输入\r\n    inputHandle(inputDirection: CONTROLLER_ENUM){\r\n        //正在移动return\r\n        if(this._isMoving){\r\n            return;\r\n        }\r\n        //人物死亡return掉\r\n        if(this.state === ENTITY_STATE_ENUM.DEATH \r\n        || this.state === ENTITY_STATE_ENUM.AIRDEATH \r\n        || this.state === ENTITY_STATE_ENUM.ATTACK\r\n        ){\r\n            return;\r\n        }\r\n\r\n        //判断攻击敌人\r\n        let id = this._willAttack(inputDirection)\r\n        if(id){\r\n            EventManager.Instance.emit(EVENT_ENUM.RECORD_STEP);\r\n            this.state = ENTITY_STATE_ENUM.ATTACK;\r\n            EventManager.Instance.emit(EVENT_ENUM.ATTACK_ENEMY, id);\r\n            EventManager.Instance.emit(EVENT_ENUM.DOOR_OPEN);\r\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\r\n            return;\r\n        }\r\n        //撞了不用往下走了\r\n        if(this.willBlock(inputDirection)){\r\n            console.log(\"block\");\r\n            if(inputDirection === CONTROLLER_ENUM.TOP){\r\n                EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.TOP);\r\n            }\r\n            else if(inputDirection === CONTROLLER_ENUM.LEFT){\r\n                EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.LEFT);\r\n            }\r\n            else if(inputDirection === CONTROLLER_ENUM.RIGHT){\r\n                EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.RIGHT);\r\n            }\r\n            else if(inputDirection === CONTROLLER_ENUM.BOTTOM){\r\n                EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.BOTTOM);\r\n            }\r\n            else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\r\n                //判断旋转时候的方向\r\n                if(this.direction === DIRECTION_ENUM.TOP){\r\n                    EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.LEFT);\r\n                }\r\n                else if(this.direction === DIRECTION_ENUM.BOTTOM){\r\n                    EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.RIGHT);\r\n                }\r\n                else if(this.direction === DIRECTION_ENUM.LEFT){\r\n                    EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.BOTTOM);\r\n                }\r\n                else if(this.direction === DIRECTION_ENUM.RIGHT){\r\n                    EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.TOP);\r\n                }\r\n            }\r\n            else if(inputDirection === CONTROLLER_ENUM.TURNRIGHT){\r\n                //判断旋转时候的方向\r\n                if(this.direction === DIRECTION_ENUM.TOP){\r\n                    EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.RIGHT);\r\n                }\r\n                else if(this.direction === DIRECTION_ENUM.BOTTOM){\r\n                    EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.LEFT);\r\n                }\r\n                else if(this.direction === DIRECTION_ENUM.LEFT){\r\n                    EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.TOP);\r\n                }\r\n                else if(this.direction === DIRECTION_ENUM.RIGHT){\r\n                    EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, SHAKE_TYPE_ENUM.BOTTOM);\r\n                }\r\n            }\r\n            \r\n\r\n            return; \r\n        }\r\n        EventManager.Instance.emit(EVENT_ENUM.RECORD_STEP);\r\n        this.move(inputDirection);\r\n\r\n    }\r\n\r\n    private _willAttack(inputDirection:CONTROLLER_ENUM):boolean{\r\n        let enemies = DataManager.Instance.enemies.filter(enemy => enemy.state !== ENTITY_STATE_ENUM.DEATH);\r\n        for (let i = 0; i < enemies.length; i++) {\r\n            let {x:enemyX, y:enemyY, id:enemyId} = enemies[i];\r\n            if(this.direction === DIRECTION_ENUM.TOP\r\n            && inputDirection === CONTROLLER_ENUM.TOP\r\n            && enemyX === this.x\r\n            && enemyY === this.targetY - 2\r\n            ){\r\n                return enemyId;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.LEFT\r\n            && inputDirection === CONTROLLER_ENUM.LEFT\r\n            && enemyX === this.x - 2\r\n            && enemyY === this.targetY\r\n            ){\r\n                return enemyId;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.RIGHT\r\n            && inputDirection === CONTROLLER_ENUM.RIGHT\r\n            && enemyX === this.x + 2\r\n            && enemyY === this.targetY\r\n            ){\r\n                return enemyId;\r\n            }\r\n            if(this.direction === DIRECTION_ENUM.BOTTOM\r\n            && inputDirection === CONTROLLER_ENUM.BOTTOM\r\n            && enemyX === this.x\r\n            && enemyY === this.targetY + 2\r\n            ){\r\n                return enemyId;\r\n            }\r\n        \r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _onDead(type:ENTITY_STATE_ENUM){\r\n        this.state = type;\r\n    }\r\n\r\n    move(inputDirection: CONTROLLER_ENUM){\r\n        \r\n        //console.log(DataManager.Instance.tileInfo);\r\n        //注意Y轴是相反的\r\n        if(inputDirection === CONTROLLER_ENUM.TOP){\r\n            this.targetY -=1;\r\n            this._isMoving = true;\r\n            this._showSmoke(DIRECTION_ENUM.TOP);\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.BOTTOM){\r\n            this.targetY +=1;\r\n            this._isMoving = true;\r\n            this._showSmoke(DIRECTION_ENUM.BOTTOM);\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.RIGHT){\r\n            this.targetX +=1;\r\n            this._isMoving = true;\r\n            this._showSmoke(DIRECTION_ENUM.RIGHT);\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.LEFT){\r\n            this.targetX -=1;\r\n            this._isMoving = true;\r\n            this._showSmoke(DIRECTION_ENUM.LEFT);\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\r\n            //左转后进入该逻辑\r\n            //左转后人物方向改变了\r\n            if(this.direction === DIRECTION_ENUM.TOP){\r\n                this.direction = DIRECTION_ENUM.LEFT;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.LEFT){\r\n                this.direction = DIRECTION_ENUM.BOTTOM;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.BOTTOM){\r\n                this.direction = DIRECTION_ENUM.RIGHT;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.RIGHT){\r\n                this.direction = DIRECTION_ENUM.TOP;\r\n            }\r\n            this.state = ENTITY_STATE_ENUM.TURNLEFT;\r\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.TURNRIGHT){\r\n            if(this.direction === DIRECTION_ENUM.TOP){\r\n                this.direction = DIRECTION_ENUM.RIGHT;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.RIGHT){\r\n                this.direction = DIRECTION_ENUM.BOTTOM;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.BOTTOM){\r\n                this.direction = DIRECTION_ENUM.LEFT;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.LEFT){\r\n                this.direction = DIRECTION_ENUM.TOP;\r\n            }\r\n            this.state = ENTITY_STATE_ENUM.TURNRIGHT;\r\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\r\n        }\r\n    }\r\n\r\n\r\n    //判断是否撞墙了\r\n    willBlock(inputDirection: CONTROLLER_ENUM):boolean{\r\n        //解构出自己数据\r\n        let {targetX:x, targetY:y, direction} = this;\r\n        //解构出地图信息\r\n        let {tileInfo: tileInfo} = DataManager.Instance;\r\n        //解构出门的信息\r\n        let {x:doorX, y:doorY, state:doorState} = DataManager.Instance.door || {};\r\n        //解构出未死亡的敌人信息\r\n        let enemies:EnemyManager[] = DataManager.Instance.enemies.filter(enemy=>enemy.state !== ENTITY_STATE_ENUM.DEATH);\r\n        //解构出地裂信息\r\n        let bursts:BurstManager[] = DataManager.Instance.bursts.filter(burst=>burst.state !== ENTITY_STATE_ENUM.DEATH);\r\n\r\n        \r\n        if(inputDirection === CONTROLLER_ENUM.TOP){\r\n            //输入方向为上\r\n            //拿到下一个y坐标(用二维坐标来表示角色位置而不是position)\r\n            let playerNextY = y - 1;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                //人当前方向也是上\r\n                //往上直接遇到墙\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n\r\n                //拿到下两个瓦片，一个是人物，一个是枪，总不能枪怼墙上\r\n                let weaponNextY = y - 2;\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                let weaponTile = tileInfo[x]?.[weaponNextY];\r\n\r\n                //判断是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY)|| (x === doorX && weaponNextY === doorY))\r\n                && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;    \r\n                }\r\n\r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)\r\n                    || (x === enemyX && weaponNextY === enemyY)\r\n                    ){\r\n                            this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                            return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                //判断地图元素\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人能走 且 枪能走，要么瓦片不存在要么瓦片可以转动\r\n                    //empty\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                //当前方向为左\r\n                //需要三个瓦片，左上角\r\n                \r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return;\r\n                }\r\n\r\n                //拿到下两个瓦片\r\n                //这个时候枪是横向左，人可能不被挡住，但是枪会\r\n                let weaponNextX = x - 1;\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                let weaponTile = tileInfo[weaponNextX]?.[playerNextY];\r\n\r\n                //是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY) || (weaponNextX === doorX && playerNextY === doorY))\r\n                && doorState != ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n                \r\n                //是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY) || (weaponNextX === enemyX && playerNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                        return true;\r\n                    }\r\n                }\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人能走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    //待定\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                //当前方向为下\r\n                //只需要下一个瓦片可走就行\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return;\r\n                }\r\n                //拿到瓦片\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                //是否碰到了门\r\n                if((x === doorX && playerNextY === doorY) && doorState != ENTITY_STATE_ENUM.DEATH){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n    \r\n                //是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if(x === enemyX && playerNextY === enemyY){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if(x === burstX && playerNextY === burstY){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n\r\n                if(playerTile && playerTile.moveable){\r\n                    //人能走就行\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                //当前方向为右\r\n                //需要三个瓦片，右上角\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return;\r\n                }\r\n\r\n                let weaponNextX = x + 1;\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                let weaponTile = tileInfo[weaponNextX]?.[playerNextY];\r\n\r\n                //是否碰到了门\r\n                if((x === doorX && playerNextY === doorY) && doorState != ENTITY_STATE_ENUM.DEATH){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n    \r\n                //是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)\r\n                    || (weaponNextX === enemyX && playerNextY === enemyY)\r\n                    ){\r\n                            this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                            return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n\r\n                \r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人物：下一个瓦片且可移动\r\n                    //枪：不存在或能转动\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.LEFT){\r\n            //输入方向为左\r\n            let playerNextX = x - 1;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                //人物方向为上\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return;\r\n                }\r\n                let weaponNextY = y - 1;\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                let weaponTile = tileInfo[playerNextX]?.[weaponNextY]\r\n                //判断是否碰到了门\r\n                if(((playerNextX === doorX && y === doorY)|| (x === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY) || (x === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人：能走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                //人物方向为左\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return;\r\n                }\r\n                let weaponNextX = x - 2;\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                let weaponTile = tileInfo[weaponNextX]?.[y];\r\n\r\n                if(((playerNextX === doorX && y === doorY)|| (weaponNextX === doorX && y === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (weaponNextX === enemyX && y === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                        return true;    \r\n                    }\r\n                }\r\n                \r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n                \r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                //人物方向为下\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return;\r\n                }\r\n                let weaponNextY = y + 1;\r\n                let playerTile:TileManger = tileInfo[playerNextX]?.[y];\r\n                let weaponTile:TileManger = tileInfo[playerNextX]?.[weaponNextY];\r\n                if(((playerNextX === doorX && y === doorY)|| (playerNextX === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (playerNextX === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                        return true;    \r\n                    }\r\n                }\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                //人物方向为右\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return;\r\n                }\r\n\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                if((playerNextX === doorX && y === doorY) && doorState !== ENTITY_STATE_ENUM.DEATH){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if(playerNextX === enemyX && y === enemyY){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.BOTTOM){\r\n            //输入方向向下\r\n            let playerNextY:number = y + 1;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                //人物向上\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return;\r\n                }\r\n                \r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                //判断是否碰到了门\r\n                if((x === doorX && playerNextY === doorY)\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if(x === enemyX && playerNextY === enemyY){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if(x === burstX && playerNextY === burstY){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                //人物向左\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return;\r\n                }\r\n                let weaponNextX = x - 1;\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                let weaponTile = tileInfo[weaponNextX]?.[playerNextY];\r\n                //判断是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY)|| (weaponNextX === doorX && playerNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)|| (weaponNextX === enemyX && playerNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人可走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                //人物向下\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return;\r\n                }\r\n                let weaponNextY:number = y + 2;\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                let weaponTile = tileInfo[x]?.[weaponNextY];\r\n\r\n                //判断是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY)|| (x === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)|| (x === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile|| weaponTile.turnable)){\r\n                    //人可走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                //人物向右\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return;\r\n                }\r\n                let weaponNextX = x + 1;\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                let weaponTile = tileInfo[weaponNextX]?.[playerNextY];\r\n                //判断是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY)|| (weaponNextX === doorX && playerNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)|| (weaponNextX === enemyX && playerNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人可走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.RIGHT){\r\n            //输入方向向右\r\n            let playerNextX = x + 1;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                //人物向上\r\n                \r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return;\r\n                }\r\n                let weaponNextY = y - 1;\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                let weaponTile = tileInfo[playerNextX]?.[weaponNextY];\r\n                //判断是否碰到了门\r\n                if(((playerNextX === doorX && y === doorY)|| (playerNextX === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (playerNextX === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                //人物向左\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return;\r\n                }\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                //判断是否碰到了门\r\n                if((playerNextX === doorX && y === doorY)\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if(playerNextX === enemyX && y === enemyY){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if(playerNextX === burstX && y === burstY){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n\r\n                if(playerTile && playerTile.moveable){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                //人物向下\r\n                \r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return;\r\n                }\r\n                let weaponNextY = y + 1;\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                let weaponTile = tileInfo[playerNextX]?.[weaponNextY];\r\n                //判断是否碰到了门\r\n                if(((playerNextX === doorX && y === doorY)|| (playerNextX === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (playerNextX === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                        return true;    \r\n                    }\r\n                }\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                //人物向右\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return;\r\n                }\r\n                let weaponNextX = x + 2;\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                let weaponTile = tileInfo[weaponNextX]?.[y];\r\n                //判断是否碰到了门\r\n                if(((playerNextX === doorX && y === doorY)|| (weaponNextX === doorX && y === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (weaponNextX === enemyX && y === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\r\n            //输入方向向左转\r\n            //需要判断三个瓦片\r\n            let nextX;\r\n            let nextY;\r\n\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                nextX = x - 1;\r\n                nextY = y - 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                nextX = x + 1;\r\n                nextY = y + 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                nextX = x - 1;\r\n                nextY = y + 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                nextX = x + 1;\r\n                nextY = y - 1;\r\n            }\r\n\r\n            //判断是否碰到了门\r\n            if(((x === doorX && nextY === doorY) || (nextX === doorX && y === doorY) || (nextX === doorX && nextY === doorY))\r\n                && doorState !== ENTITY_STATE_ENUM.DEATH\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\r\n                return true;  \r\n            }\r\n\r\n            //判断是否碰到了敌人\r\n            for(let i = 0; i < enemies.length; ++i){\r\n                let {x:enemyX, y:enemyY} = enemies[i];\r\n                if((x === enemyX && nextY === enemyY) || (nextX === enemyX && y === enemyY) || (nextX === enemyX && nextY === enemyY)){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\r\n                    return true;    \r\n                }\r\n            }\r\n\r\n            \r\n\r\n            if(\r\n                   (!tileInfo[x][nextY] || tileInfo[x][nextY].turnable)\r\n                && (!tileInfo[nextX][y] || tileInfo[nextX][y].turnable)\r\n                && (!tileInfo[nextX][nextY] || tileInfo[nextX][nextY].turnable)\r\n            ){\r\n                //empty\r\n            }\r\n            else{\r\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.TURNRIGHT){\r\n            //输入方向向左转\r\n            //需要判断三个瓦片\r\n            let nextX;\r\n            let nextY;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                nextX = x + 1;\r\n                nextY = y - 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                nextX = x - 1;\r\n                nextY = y + 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                nextX = x - 1;\r\n                nextY = y - 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                nextX = x + 1;\r\n                nextY = y + 1;\r\n            }\r\n\r\n            //判断是否碰到了门\r\n            if(((x === doorX && nextY === doorY) || (nextX === doorX && y === doorY) || (nextX === doorX && nextY === doorY))\r\n                && doorState !== ENTITY_STATE_ENUM.DEATH\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT;\r\n                return true;  \r\n            }\r\n\r\n            //判断是否碰到了敌人\r\n            for(let i = 0; i < enemies.length; ++i){\r\n                let {x:enemyX, y:enemyY} = enemies[i];\r\n                if((x === enemyX && nextY === enemyY) || (nextX === enemyX && y === enemyY) || (nextX === enemyX && nextY === enemyY)){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT;\r\n                    return true;    \r\n                }\r\n            }\r\n\r\n            if(\r\n                   (!tileInfo[x][nextY] || tileInfo[x][nextY].turnable)\r\n                && (!tileInfo[nextX][y] || tileInfo[nextX][y].turnable)\r\n                && (!tileInfo[nextX][nextY] || tileInfo[nextX][nextY].turnable)\r\n            ){\r\n                //empty\r\n            }\r\n            else{\r\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT;\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    private _showSmoke(type: DIRECTION_ENUM){\r\n        EventManager.Instance.emit(EVENT_ENUM.SHOW_SMOKE, this.x, this.y, type);\r\n    }\r\n\r\n    public onAttackShake(type: SHAKE_TYPE_ENUM){\r\n        EventManager.Instance.emit(EVENT_ENUM.SCREEN_SHAKE, type);  \r\n    }\r\n}\r\n\r\n\r\n"]}