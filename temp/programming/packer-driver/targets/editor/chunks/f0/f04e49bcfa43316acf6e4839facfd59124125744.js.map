{"version":3,"sources":["file:///E:/git/Cramped_Room_Of_Death/assets/scripts/player/PlayerManager.ts"],"names":["_decorator","CONTROLLER_ENUM","DIRECTION_ENUM","ENTITY_STATE_ENUM","EVENT_ENUM","EventManager","PlayerStateMachine","EntityManager","DataManager","ccclass","property","PlayerManager","targetX","targetY","_speed","_isMoving","init","params","fsm","addComponent","x","y","Instance","on","PLAYER_CTRL","inputHandle","ATTACK_PLAYER","_onDead","update","updateXY","onDestroy","off","Math","abs","emit","PLAYER_MOVE_END","inputDirection","state","DEATH","AIRDEATH","ATTACK","id","_willAttack","ATTACK_ENEMY","DOOR_OPEN","willBlock","console","log","move","enemies","filter","enemy","i","length","enemyX","enemyY","enemyId","direction","TOP","LEFT","RIGHT","BOTTOM","type","_showSmoke","TURNLEFT","TURNRIGHT","tileInfo","doorX","doorY","doorState","door","bursts","burst","playerNextY","BLOCKFRONT","weaponNextY","playerTile","weaponTile","burstX","burstY","turnable","moveable","BLOCKLEFT","weaponNextX","BLOCKBACK","BLOCKRIGHT","playerNextX","nextX","nextY","BLOCKTURNLEFT","BLOCKTURNRIGHT","SHOW_SMOKE"],"mappings":"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","sourcesContent":["import { _decorator } from 'cc';\r\nimport { TileManger } from '../tile/TileManger';\r\nimport { CONTROLLER_ENUM, DIRECTION_ENUM, ENTITY_STATE_ENUM, EVENT_ENUM } from '../../enums';\r\nimport EventManager from '../../runtime/EventManager';\r\nimport { PlayerStateMachine } from './PlayerStateMachine';\r\nimport { EntityManager } from '../../base/EntityManager';\r\nimport DataManager from '../../runtime/DataManager';\r\nimport { IEntity } from '../../levels';\r\nimport { EnemyManager } from '../../base/EnemyManager';\r\nimport { BurstManager } from '../burst/BurstManager';\r\nlet { ccclass, property } = _decorator;\r\n\r\n\r\n\r\n\r\n@ccclass('PlayerManager')\r\nexport class PlayerManager extends EntityManager {\r\n\r\n    targetX:number = 0;\r\n    targetY:number = 0;\r\n    private  readonly _speed = 1/10;\r\n    private _isMoving:boolean = false;\r\n\r\n\r\n    async init(params: IEntity){   \r\n        //添加状态机\r\n        this.fsm = this.addComponent(PlayerStateMachine);\r\n        await this.fsm.init();\r\n        super.init(params);\r\n\r\n        this.targetX = this.x;\r\n        this.targetY = this.y;\r\n\r\n        //await this.render();\r\n        //move函数和EVENT_ENUM.PLAYER_CTRL信号绑定到了一起\r\n        EventManager.Instance.on(EVENT_ENUM.PLAYER_CTRL, this.inputHandle, this);\r\n        EventManager.Instance.on(EVENT_ENUM.ATTACK_PLAYER, this._onDead, this);\r\n    }\r\n\r\n    update(){\r\n        this.updateXY();\r\n        //虚拟坐标转换为瓦片坐标\r\n        //瓦片地图左上角为原点\r\n        //注意人物大小与瓦片之间的偏移\r\n        super.update();\r\n    }\r\n    \r\n    onDestroy(): void {\r\n        super.onDestroy();\r\n        EventManager.Instance.off(EVENT_ENUM.PLAYER_CTRL, this.inputHandle);\r\n        EventManager.Instance.off(EVENT_ENUM.ATTACK_PLAYER, this._onDead);\r\n    }\r\n    updateXY(){\r\n        if(this.targetX < this.x){  //在目标右侧\r\n            this.x -= this._speed;  //向左移动\r\n        }\r\n        else if(this.targetX > this.x){\r\n            this.x += this._speed;\r\n        }\r\n\r\n        if(this.targetY < this.y){  //在目标上侧\r\n            this.y -= this._speed;  //向下移动\r\n        }\r\n        else if(this.targetY > this.y){\r\n            this.y += this._speed;\r\n        }\r\n\r\n        //达到一定距离直接赋值，防止鬼畜\r\n        if(Math.abs(this.targetX - this.x) <= 0.1 && Math.abs(this.targetY - this.y) <= 0.1 && this._isMoving){\r\n            this._isMoving = false;\r\n            this.x = this.targetX;\r\n            this.y = this.targetY;\r\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\r\n        }\r\n    }\r\n\r\n\r\n    //处理用户输入\r\n    inputHandle(inputDirection: CONTROLLER_ENUM){\r\n        //正在移动return\r\n        if(this._isMoving){\r\n            return;\r\n        }\r\n        //人物死亡return掉\r\n        if(this.state === ENTITY_STATE_ENUM.DEATH \r\n        || this.state === ENTITY_STATE_ENUM.AIRDEATH \r\n        || this.state === ENTITY_STATE_ENUM.ATTACK\r\n        ){\r\n            return;\r\n        }\r\n\r\n        //判断攻击敌人\r\n        let id = this._willAttack(inputDirection)\r\n        if(id){\r\n            EventManager.Instance.emit(EVENT_ENUM.ATTACK_ENEMY, id);\r\n            EventManager.Instance.emit(EVENT_ENUM.DOOR_OPEN);\r\n            return;\r\n        }\r\n        //撞了不用往下走了\r\n        if(this.willBlock(inputDirection)){\r\n            console.log(\"block\");\r\n            return; \r\n        }\r\n        this.move(inputDirection);\r\n\r\n    }\r\n\r\n    private _willAttack(inputDirection:CONTROLLER_ENUM):boolean{\r\n        let enemies = DataManager.Instance.enemies.filter(enemy => enemy.state !== ENTITY_STATE_ENUM.DEATH);\r\n        for (let i = 0; i < enemies.length; i++) {\r\n            let {x:enemyX, y:enemyY, id:enemyId} = enemies[i];\r\n            if(this.direction === DIRECTION_ENUM.TOP\r\n            && inputDirection === CONTROLLER_ENUM.TOP\r\n            && enemyX === this.x\r\n            && enemyY === this.targetY - 2\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.ATTACK;\r\n                return enemyId;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.LEFT\r\n            && inputDirection === CONTROLLER_ENUM.LEFT\r\n            && enemyX === this.x - 2\r\n            && enemyY === this.targetY\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.ATTACK;\r\n                return enemyId;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.RIGHT\r\n            && inputDirection === CONTROLLER_ENUM.RIGHT\r\n            && enemyX === this.x + 2\r\n            && enemyY === this.targetY\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.ATTACK;\r\n                return enemyId;\r\n            }\r\n            if(this.direction === DIRECTION_ENUM.BOTTOM\r\n            && inputDirection === CONTROLLER_ENUM.BOTTOM\r\n            && enemyX === this.x\r\n            && enemyY === this.targetY + 2\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.ATTACK;\r\n                return enemyId;\r\n            }\r\n        \r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _onDead(type:ENTITY_STATE_ENUM){\r\n        this.state = type;\r\n    }\r\n\r\n    move(inputDirection: CONTROLLER_ENUM){\r\n        \r\n        //console.log(DataManager.Instance.tileInfo);\r\n        //注意Y轴是相反的\r\n        if(inputDirection === CONTROLLER_ENUM.TOP){\r\n            this.targetY -=1;\r\n            this._isMoving = true;\r\n            this._showSmoke(DIRECTION_ENUM.TOP);\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.BOTTOM){\r\n            this.targetY +=1;\r\n            this._isMoving = true;\r\n            this._showSmoke(DIRECTION_ENUM.BOTTOM);\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.RIGHT){\r\n            this.targetX +=1;\r\n            this._isMoving = true;\r\n            this._showSmoke(DIRECTION_ENUM.RIGHT);\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.LEFT){\r\n            this.targetX -=1;\r\n            this._isMoving = true;\r\n            this._showSmoke(DIRECTION_ENUM.LEFT);\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\r\n            //左转后进入该逻辑\r\n            //左转后人物方向改变了\r\n            if(this.direction === DIRECTION_ENUM.TOP){\r\n                this.direction = DIRECTION_ENUM.LEFT;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.LEFT){\r\n                this.direction = DIRECTION_ENUM.BOTTOM;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.BOTTOM){\r\n                this.direction = DIRECTION_ENUM.RIGHT;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.RIGHT){\r\n                this.direction = DIRECTION_ENUM.TOP;\r\n            }\r\n            this.state = ENTITY_STATE_ENUM.TURNLEFT;\r\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.TURNRIGHT){\r\n            if(this.direction === DIRECTION_ENUM.TOP){\r\n                this.direction = DIRECTION_ENUM.RIGHT;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.RIGHT){\r\n                this.direction = DIRECTION_ENUM.BOTTOM;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.BOTTOM){\r\n                this.direction = DIRECTION_ENUM.LEFT;\r\n            }\r\n            else if(this.direction === DIRECTION_ENUM.LEFT){\r\n                this.direction = DIRECTION_ENUM.TOP;\r\n            }\r\n            this.state = ENTITY_STATE_ENUM.TURNRIGHT;\r\n            EventManager.Instance.emit(EVENT_ENUM.PLAYER_MOVE_END);\r\n        }\r\n    }\r\n\r\n\r\n    //判断是否撞墙了\r\n    willBlock(inputDirection: CONTROLLER_ENUM):boolean{\r\n        //解构出自己数据\r\n        let {targetX:x, targetY:y, direction} = this;\r\n        //解构出地图信息\r\n        let {tileInfo: tileInfo} = DataManager.Instance;\r\n        //解构出门的信息\r\n        let {x:doorX, y:doorY, state:doorState} = DataManager.Instance.door || {};\r\n        //解构出未死亡的敌人信息\r\n        let enemies:EnemyManager[] = DataManager.Instance.enemies.filter(enemy=>enemy.state !== ENTITY_STATE_ENUM.DEATH);\r\n        //解构出地裂信息\r\n        let bursts:BurstManager[] = DataManager.Instance.bursts.filter(burst=>burst.state !== ENTITY_STATE_ENUM.DEATH);\r\n\r\n        \r\n        if(inputDirection === CONTROLLER_ENUM.TOP){\r\n            //输入方向为上\r\n            //拿到下一个y坐标(用二维坐标来表示角色位置而不是position)\r\n            let playerNextY = y - 1;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                //人当前方向也是上\r\n                //往上直接遇到墙\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n\r\n                //拿到下两个瓦片，一个是人物，一个是枪，总不能枪怼墙上\r\n                let weaponNextY = y - 2;\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                let weaponTile = tileInfo[x]?.[weaponNextY];\r\n\r\n                //判断是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY)|| (x === doorX && weaponNextY === doorY))\r\n                && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;    \r\n                }\r\n\r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)\r\n                    || (x === enemyX && weaponNextY === enemyY)\r\n                    ){\r\n                            this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                            return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                //判断地图元素\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人能走 且 枪能走，要么瓦片不存在要么瓦片可以转动\r\n                    //empty\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                //当前方向为左\r\n                //需要三个瓦片，左上角\r\n                \r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return;\r\n                }\r\n\r\n                //拿到下两个瓦片\r\n                //这个时候枪是横向左，人可能不被挡住，但是枪会\r\n                let weaponNextX = x - 1;\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                let weaponTile = tileInfo[weaponNextX]?.[playerNextY];\r\n\r\n                //是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY) || (weaponNextX === doorX && playerNextY === doorY))\r\n                && doorState != ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n                \r\n                //是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY) || (weaponNextX === enemyX && playerNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                        return true;\r\n                    }\r\n                }\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人能走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    //待定\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                //当前方向为下\r\n                //只需要下一个瓦片可走就行\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return;\r\n                }\r\n                //拿到瓦片\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                //是否碰到了门\r\n                if((x === doorX && playerNextY === doorY) && doorState != ENTITY_STATE_ENUM.DEATH){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n    \r\n                //是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if(x === enemyX && playerNextY === enemyY){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if(x === burstX && playerNextY === burstY){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n\r\n                if(playerTile && playerTile.moveable){\r\n                    //人能走就行\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                //当前方向为右\r\n                //需要三个瓦片，右上角\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return;\r\n                }\r\n\r\n                let weaponNextX = x + 1;\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                let weaponTile = tileInfo[weaponNextX]?.[playerNextY];\r\n\r\n                //是否碰到了门\r\n                if((x === doorX && playerNextY === doorY) && doorState != ENTITY_STATE_ENUM.DEATH){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n    \r\n                //是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)\r\n                    || (weaponNextX === enemyX && playerNextY === enemyY)\r\n                    ){\r\n                            this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                            return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n\r\n                \r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人物：下一个瓦片且可移动\r\n                    //枪：不存在或能转动\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.LEFT){\r\n            //输入方向为左\r\n            let playerNextX = x - 1;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                //人物方向为上\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return;\r\n                }\r\n                let weaponNextY = y - 1;\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                let weaponTile = tileInfo[playerNextX]?.[weaponNextY]\r\n                //判断是否碰到了门\r\n                if(((playerNextX === doorX && y === doorY)|| (x === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY) || (x === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人：能走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                //人物方向为左\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return;\r\n                }\r\n                let weaponNextX = x - 2;\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                let weaponTile = tileInfo[weaponNextX]?.[y];\r\n\r\n                if(((playerNextX === doorX && y === doorY)|| (weaponNextX === doorX && y === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (weaponNextX === enemyX && y === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                        return true;    \r\n                    }\r\n                }\r\n                \r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n                \r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                //人物方向为下\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return;\r\n                }\r\n                let weaponNextY = y + 1;\r\n                let playerTile:TileManger = tileInfo[playerNextX]?.[y];\r\n                let weaponTile:TileManger = tileInfo[playerNextX]?.[weaponNextY];\r\n                if(((playerNextX === doorX && y === doorY)|| (playerNextX === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (playerNextX === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                        return true;    \r\n                    }\r\n                }\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                //人物方向为右\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return;\r\n                }\r\n\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                if((playerNextX === doorX && y === doorY) && doorState !== ENTITY_STATE_ENUM.DEATH){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if(playerNextX === enemyX && y === enemyY){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.BOTTOM){\r\n            //输入方向向下\r\n            let playerNextY:number = y + 1;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                //人物向上\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return;\r\n                }\r\n                \r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                //判断是否碰到了门\r\n                if((x === doorX && playerNextY === doorY)\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if(x === enemyX && playerNextY === enemyY){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if(x === burstX && playerNextY === burstY){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                //人物向左\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return;\r\n                }\r\n                let weaponNextX = x - 1;\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                let weaponTile = tileInfo[weaponNextX]?.[playerNextY];\r\n                //判断是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY)|| (weaponNextX === doorX && playerNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)|| (weaponNextX === enemyX && playerNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人可走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                //人物向下\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return;\r\n                }\r\n                let weaponNextY:number = y + 2;\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                let weaponTile = tileInfo[x]?.[weaponNextY];\r\n\r\n                //判断是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY)|| (x === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)|| (x === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile|| weaponTile.turnable)){\r\n                    //人可走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                //人物向右\r\n                if(playerNextY < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return;\r\n                }\r\n                let weaponNextX = x + 1;\r\n                let playerTile = tileInfo[x]?.[playerNextY];\r\n                let weaponTile = tileInfo[weaponNextX]?.[playerNextY];\r\n                //判断是否碰到了门\r\n                if(((x === doorX && playerNextY === doorY)|| (weaponNextX === doorX && playerNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((x === enemyX && playerNextY === enemyY)|| (weaponNextX === enemyX && playerNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((x === burstX && playerNextY === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n                    //人可走\r\n                    //枪不存在，或者枪能转\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.RIGHT){\r\n            //输入方向向右\r\n            let playerNextX = x + 1;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                //人物向上\r\n                \r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return;\r\n                }\r\n                let weaponNextY = y - 1;\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                let weaponTile = tileInfo[playerNextX]?.[weaponNextY];\r\n                //判断是否碰到了门\r\n                if(((playerNextX === doorX && y === doorY)|| (playerNextX === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (playerNextX === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                //人物向左\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return;\r\n                }\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                //判断是否碰到了门\r\n                if((playerNextX === doorX && y === doorY)\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if(playerNextX === enemyX && y === enemyY){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if(playerNextX === burstX && y === burstY){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n\r\n                if(playerTile && playerTile.moveable){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT;\r\n                    return true;\r\n                }\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                //人物向下\r\n                \r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return;\r\n                }\r\n                let weaponNextY = y + 1;\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                let weaponTile = tileInfo[playerNextX]?.[weaponNextY];\r\n                //判断是否碰到了门\r\n                if(((playerNextX === doorX && y === doorY)|| (playerNextX === doorX && weaponNextY === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (playerNextX === enemyX && weaponNextY === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                        return true;    \r\n                    }\r\n                }\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                //人物向右\r\n                if(playerNextX < 0){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return;\r\n                }\r\n                let weaponNextX = x + 2;\r\n                let playerTile = tileInfo[playerNextX]?.[y];\r\n                let weaponTile = tileInfo[weaponNextX]?.[y];\r\n                //判断是否碰到了门\r\n                if(((playerNextX === doorX && y === doorY)|| (weaponNextX === doorX && y === doorY))\r\n                    && doorState !== ENTITY_STATE_ENUM.DEATH\r\n                ){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;  \r\n                }\r\n    \r\n                //判断是否碰到了敌人\r\n                for(let i = 0; i < enemies.length; ++i){\r\n                    let {x:enemyX, y:enemyY} = enemies[i];\r\n                    if((playerNextX === enemyX && y === enemyY)|| (weaponNextX === enemyX && y === enemyY)){\r\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                        return true;    \r\n                    }\r\n                }\r\n\r\n                //判断地裂\r\n                for (let i = 0; i < bursts.length; i++) {\r\n                    let {x:burstX, y:burstY} = bursts[i];\r\n                    //人能走且枪能走\r\n                    if((playerNextX === burstX && y === burstY) && (!weaponTile || weaponTile.turnable)){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(playerTile && playerTile.moveable && (!weaponTile || weaponTile.turnable)){\r\n\r\n                }\r\n                else{\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT;\r\n                    return true;\r\n                }\r\n\r\n            }\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.TURNLEFT){\r\n            //输入方向向左转\r\n            //需要判断三个瓦片\r\n            let nextX;\r\n            let nextY;\r\n\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                nextX = x - 1;\r\n                nextY = y - 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                nextX = x + 1;\r\n                nextY = y + 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                nextX = x - 1;\r\n                nextY = y + 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                nextX = x + 1;\r\n                nextY = y - 1;\r\n            }\r\n\r\n            //判断是否碰到了门\r\n            if(((x === doorX && nextY === doorY) || (nextX === doorX && y === doorY) || (nextX === doorX && nextY === doorY))\r\n                && doorState !== ENTITY_STATE_ENUM.DEATH\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\r\n                return true;  \r\n            }\r\n\r\n            //判断是否碰到了敌人\r\n            for(let i = 0; i < enemies.length; ++i){\r\n                let {x:enemyX, y:enemyY} = enemies[i];\r\n                if((x === enemyX && nextY === enemyY) || (nextX === enemyX && y === enemyY) || (nextX === enemyX && nextY === enemyY)){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\r\n                    return true;    \r\n                }\r\n            }\r\n\r\n            \r\n\r\n            if(\r\n                   (!tileInfo[x][nextY] || tileInfo[x][nextY].turnable)\r\n                && (!tileInfo[nextX][y] || tileInfo[nextX][y].turnable)\r\n                && (!tileInfo[nextX][nextY] || tileInfo[nextX][nextY].turnable)\r\n            ){\r\n                //empty\r\n            }\r\n            else{\r\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT;\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n        else if(inputDirection === CONTROLLER_ENUM.TURNRIGHT){\r\n            //输入方向向左转\r\n            //需要判断三个瓦片\r\n            let nextX;\r\n            let nextY;\r\n            if(direction === DIRECTION_ENUM.TOP){\r\n                nextX = x + 1;\r\n                nextY = y - 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.BOTTOM){\r\n                nextX = x - 1;\r\n                nextY = y + 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.LEFT){\r\n                nextX = x - 1;\r\n                nextY = y - 1;\r\n            }\r\n            else if(direction === DIRECTION_ENUM.RIGHT){\r\n                nextX = x + 1;\r\n                nextY = y + 1;\r\n            }\r\n\r\n            //判断是否碰到了门\r\n            if(((x === doorX && nextY === doorY) || (nextX === doorX && y === doorY) || (nextX === doorX && nextY === doorY))\r\n                && doorState !== ENTITY_STATE_ENUM.DEATH\r\n            ){\r\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT;\r\n                return true;  \r\n            }\r\n\r\n            //判断是否碰到了敌人\r\n            for(let i = 0; i < enemies.length; ++i){\r\n                let {x:enemyX, y:enemyY} = enemies[i];\r\n                if((x === enemyX && nextY === enemyY) || (nextX === enemyX && y === enemyY) || (nextX === enemyX && nextY === enemyY)){\r\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT;\r\n                    return true;    \r\n                }\r\n            }\r\n\r\n            if(\r\n                   (!tileInfo[x][nextY] || tileInfo[x][nextY].turnable)\r\n                && (!tileInfo[nextX][y] || tileInfo[nextX][y].turnable)\r\n                && (!tileInfo[nextX][nextY] || tileInfo[nextX][nextY].turnable)\r\n            ){\r\n                //empty\r\n            }\r\n            else{\r\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT;\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    private _showSmoke(type: DIRECTION_ENUM){\r\n        EventManager.Instance.emit(EVENT_ENUM.SHOW_SMOKE, this.x, this.y, type);\r\n    }\r\n}\r\n\r\n\r\n"]}