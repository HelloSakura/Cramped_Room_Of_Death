{"version":3,"sources":["file:///E:/git/Cramped_Room_Of_Death/assets/scripts/spikes/SpikeStateMachine.ts"],"names":["_decorator","Animation","ENTITY_TYPE_ENUM","PARAMS_NAME_ENUM","SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM","getInitParamsNumber","StateMachine","SpikeOneSubStateMachine","SpikeTwoSubStateMachine","SpikeFourSubStateMachine","SpikeThreeSubStateMachine","SpikeManager","ccclass","property","SpikeStateMachine","init","animationComponent","addComponent","initParams","initStateMachine","initAnimationEvent","Promise","all","waitingList","params","set","SPIKES_CUR_COUNT","SPIKES_TOTAL_COUNT","stateMachine","SPIKES_ONE","SPIKES_TWO","SPIKES_THREE","SPIKES_FOUR","on","EventType","FINISHED","name","defaultClip","value","getParams","includes","node","getComponent","backZero","run","_currentState","get","currentState"],"mappings":"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","sourcesContent":["import { _decorator, Animation } from 'cc';\r\nimport { ENTITY_STATE_ENUM, ENTITY_TYPE_ENUM, EVENT_ENUM, PARAMS_NAME_ENUM, SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM } from '../../enums';\r\nimport { getInitParamsNumber, getInitParamsTrigger, StateMachine } from '../../base/StateMachine';\r\nimport SpikeOneSubStateMachine from './SpikeOneSubStateMachine';\r\nimport SpikeTwoSubStateMachine from './SpikeTwoSubStateMachine';\r\nimport SpikeFourSubStateMachine from './SpikeFourSubStateMachine';\r\nimport SpikeThreeSubStateMachine from './SpikeThreeSubStateMachine';\r\nimport { EntityManager } from '../../base/EntityManager';\r\nimport { SpikeManager } from './SpikeManager';\r\n\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SpikeStateMachine')\r\nexport class SpikeStateMachine extends StateMachine {\r\n\r\n    async init() {\r\n        //添加animation组件\r\n        this.animationComponent = this.addComponent(Animation);\r\n\r\n        this.initParams();\r\n        this.initStateMachine();\r\n        //等待所有资源加载完毕，才结束init\r\n        this.initAnimationEvent();\r\n        await Promise.all(this.waitingList);\r\n    }\r\n\r\n    initParams() {\r\n        this.params.set(PARAMS_NAME_ENUM.SPIKES_CUR_COUNT, getInitParamsNumber());\r\n        this.params.set(PARAMS_NAME_ENUM.SPIKES_TOTAL_COUNT, getInitParamsNumber());\r\n    }\r\n\r\n    initStateMachine() {\r\n        this.stateMachine.set(ENTITY_TYPE_ENUM.SPIKES_ONE, new SpikeOneSubStateMachine(this));\r\n        this.stateMachine.set(ENTITY_TYPE_ENUM.SPIKES_TWO, new SpikeTwoSubStateMachine(this));\r\n        this.stateMachine.set(ENTITY_TYPE_ENUM.SPIKES_THREE, new SpikeThreeSubStateMachine(this));\r\n        this.stateMachine.set(ENTITY_TYPE_ENUM.SPIKES_FOUR, new SpikeFourSubStateMachine(this));\r\n    }\r\n\r\n\r\n    initAnimationEvent() {\r\n        //播到最大数量放回\r\n        this.animationComponent.on(Animation.EventType.FINISHED, ()=>{\r\n            const name = this.animationComponent.defaultClip.name;\r\n            const value = this.getParams(PARAMS_NAME_ENUM.SPIKES_TOTAL_COUNT);\r\n            if((value === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_ONE && name.includes('spikesone/two'))\r\n            || (value === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_TWO  && name.includes('spikestwo/three'))\r\n            || (value === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_THREE && name.includes('spikesthree/four'))\r\n            || (value === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_FOUR && name.includes('spikesfour/five'))\r\n            ){\r\n                this.node.getComponent(SpikeManager).backZero();\r\n            }\r\n            \r\n        });\r\n    }\r\n\r\n\r\n    run() {\r\n        /*\r\n        1.判断一下当前是什么状态；\r\n        2.如果当前处于某个状态，接下来判断参数列表；\r\n        3.如果某个触发器处于触发状态，那么就需要进行状态的改变，就从对应状态机列表那里取到对应的\r\n            状态机，并设置当前状态为改变后的状态\r\n        4.使用set方式，可以在set里面调用当前状态的run方法走对应的逻辑\r\n\r\n         */\r\n        //获取总点数\r\n        const value = this.getParams(PARAMS_NAME_ENUM.SPIKES_TOTAL_COUNT);\r\n\r\n        switch (this._currentState) {\r\n            case this.stateMachine.get(ENTITY_TYPE_ENUM.SPIKES_ONE):\r\n            case this.stateMachine.get(ENTITY_TYPE_ENUM.SPIKES_TWO):\r\n            case this.stateMachine.get(ENTITY_TYPE_ENUM.SPIKES_THREE):\r\n            case this.stateMachine.get(ENTITY_TYPE_ENUM.SPIKES_FOUR):\r\n                if (value === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_ONE) {\r\n                    this.currentState = this.stateMachine.get(ENTITY_TYPE_ENUM.SPIKES_ONE);\r\n                }\r\n                else if (value === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_TWO) {\r\n                    this.currentState = this.stateMachine.get(ENTITY_TYPE_ENUM.SPIKES_TWO);\r\n                }\r\n                else if (value === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_THREE) {\r\n                    this.currentState = this.stateMachine.get(ENTITY_TYPE_ENUM.SPIKES_THREE);\r\n                }\r\n                else if (value === SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM.SPIKES_FOUR) {\r\n                    this.currentState = this.stateMachine.get(ENTITY_TYPE_ENUM.SPIKES_FOUR);\r\n                }\r\n                else {\r\n                    this.currentState = this.currentState;\r\n                }\r\n                break;\r\n            default:\r\n                this.currentState = this.stateMachine.get(ENTITY_TYPE_ENUM.SPIKES_ONE);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}