{"version":3,"sources":["file:///E:/git/Cramped_Room_Of_Death/assets/scripts/scenes/BattleManager.ts"],"names":["_decorator","Component","Node","TileMapManager","levels","DataManager","TILE_HEIGHT","TILE_WIDTH","EventManager","DIRECTION_ENUM","ENTITY_STATE_ENUM","ENTITY_TYPE_ENUM","EVENT_ENUM","createUINode","PlayerManager","WoodenSkeletonManager","DoorManager","IronSkeletonManager","BurstManager","SpikeManager","ccclass","property","BattleManager","level","stage","onLoad","Instance","on","NEXT_LEVEL","nextLevel","onDestroy","off","start","generateStage","initLevel","levelIndex","clearLevel","mapInfo","mapRowCount","length","mapColumnCount","generateTileMap","generateBurst","generateSpikes","generateDoor","generateEnemy","generatePlayer","destroyAllChildren","reset","setParent","node","name","tileMap","tileMapManager","addComponent","init","adaptPos","burst","burstManager","x","y","type","BURST","direction","TOP","state","IDLE","bursts","push","player","playManager","PLAYER","emit","PLAYER_BORN","spikes","spikesManager","SPIKES_FOUR","count","door","doorManager","DOOR","enemy","woodenSkeletonManager","SKELETON_WOODEN","enemies","ironSkeleton","ironSkeletonManager","SKELETON_IRON","disX","disY","setPosition"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nimport { TileMapManager } from '../tile/TileMapManager';\r\nimport levels, { ILevel } from '../../levels';\r\nimport DataManager from '../../runtime/DataManager';\r\nimport { TILE_HEIGHT, TILE_WIDTH } from '../tile/TileManger';\r\nimport EventManager from '../../runtime/EventManager';\r\nimport { DIRECTION_ENUM, ENTITY_STATE_ENUM, ENTITY_TYPE_ENUM, EVENT_ENUM } from '../../enums';\r\nimport { createUINode } from '../../utils';\r\nimport { PlayerManager } from '../player/PlayerManager';\r\nimport { WoodenSkeletonManager } from '../woodenSkeleton/WoodenSkeletonManager';\r\nimport { DoorManager } from '../door/DoorManager';\r\nimport { IronSkeletonManager } from '../ironSkeleton/IronSkeletonManager';\r\nimport { BurstManager } from '../burst/BurstManager';\r\nimport { SpikeManager } from '../spikes/SpikeManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BattleManager')\r\nexport class BattleManager extends Component {\r\n    level:ILevel;\r\n    stage:Node;\r\n\r\n    //\r\n    onLoad(){\r\n        //绑定切换关卡\r\n        EventManager.Instance.on(EVENT_ENUM.NEXT_LEVEL, this.nextLevel, this);\r\n    }\r\n\r\n    onDestroy(){\r\n        //解绑切换关卡\r\n        EventManager.Instance.off(EVENT_ENUM.NEXT_LEVEL, this.nextLevel)\r\n    }\r\n\r\n    start() {\r\n        this.generateStage();\r\n        this.initLevel();\r\n    }\r\n\r\n    initLevel(){\r\n        const level = levels[`level${DataManager.Instance.levelIndex}`];\r\n        if(level){\r\n            this.clearLevel();\r\n            this.level = level;\r\n            DataManager.Instance.mapInfo = this.level.mapInfo;\r\n            DataManager.Instance.mapRowCount = this.level.mapInfo.length || 0;\r\n            DataManager.Instance.mapColumnCount = this.level.mapInfo[0].length || 0;\r\n\r\n            this.generateTileMap();\r\n            this.generateBurst();\r\n            this.generateSpikes();\r\n            this.generateDoor();\r\n            this.generateEnemy();\r\n            //生成player\r\n            this.generatePlayer();\r\n            \r\n            \r\n        }\r\n    }\r\n\r\n    nextLevel(){\r\n        DataManager.Instance.levelIndex++;\r\n        this.initLevel();\r\n    }\r\n\r\n    clearLevel(){\r\n        //清空数据，销毁上一关地图后再加载下一关\r\n        this.stage.destroyAllChildren();\r\n        DataManager.Instance.reset();\r\n    }\r\n\r\n    generateStage(){\r\n        //创建舞台，所有单元放在舞台上\r\n        this.stage = new Node();\r\n        this.stage.setParent(this.node);\r\n        this.stage.name = \"stage\";\r\n    }\r\n\r\n\r\n    async generateTileMap(){\r\n        //创建瓦片地图节点\r\n        let tileMap = new Node();\r\n        tileMap.setParent(this.stage);\r\n\r\n        //执行生成逻辑，放在组件上\r\n        const tileMapManager = tileMap.addComponent(TileMapManager);\r\n        await tileMapManager.init();\r\n\r\n        //地图居中\r\n        this.adaptPos();\r\n    }\r\n\r\n\r\n    async generateBurst(){\r\n        const burst = createUINode();\r\n        burst.setParent(this.stage);\r\n        const burstManager = burst.addComponent(BurstManager);\r\n        await burstManager.init({\r\n            x:2,\r\n            y:6,\r\n            type: ENTITY_TYPE_ENUM.BURST,\r\n            direction:DIRECTION_ENUM.TOP,\r\n            state:ENTITY_STATE_ENUM.IDLE\r\n        });\r\n        DataManager.Instance.bursts.push(burstManager);\r\n    }\r\n\r\n    async generatePlayer(){\r\n        const player = createUINode();\r\n        player.setParent(this.stage);\r\n        const playManager = player.addComponent(PlayerManager);\r\n        await playManager.init({\r\n            x:2,\r\n            y:8,\r\n            type: ENTITY_TYPE_ENUM.PLAYER,\r\n            direction:DIRECTION_ENUM.TOP,\r\n            state:ENTITY_STATE_ENUM.IDLE\r\n        });\r\n        DataManager.Instance.player = playManager;\r\n        EventManager.Instance.emit(EVENT_ENUM.PLAYER_BORN, true);\r\n        \r\n    }\r\n\r\n    async generateSpikes(){\r\n        const spikes = createUINode();\r\n        spikes.setParent(this.stage);\r\n        const spikesManager = spikes.addComponent(SpikeManager);\r\n        await spikesManager.init({\r\n            x:2,\r\n            y:5,\r\n            type: ENTITY_TYPE_ENUM.SPIKES_FOUR,\r\n            count: 0\r\n        });\r\n        DataManager.Instance.spikes.push(spikesManager);\r\n    }\r\n    async generateDoor(){\r\n        const door = createUINode();\r\n        door.setParent(this.stage);\r\n        const doorManager = door.addComponent(DoorManager);\r\n        await doorManager.init({\r\n            x:7,\r\n            y:8,\r\n            type: ENTITY_TYPE_ENUM.DOOR,\r\n            direction:DIRECTION_ENUM.TOP,\r\n            state:ENTITY_STATE_ENUM.IDLE\r\n        });\r\n        DataManager.Instance.door = doorManager;\r\n    }\r\n\r\n    async generateEnemy(){\r\n        const enemy = createUINode();\r\n        enemy.setParent(this.stage);\r\n        const woodenSkeletonManager = enemy.addComponent(WoodenSkeletonManager);\r\n        await woodenSkeletonManager.init({\r\n            x:2,\r\n            y:2,\r\n            type: ENTITY_TYPE_ENUM.SKELETON_WOODEN,\r\n            direction:DIRECTION_ENUM.TOP,\r\n            state:ENTITY_STATE_ENUM.IDLE\r\n        });\r\n        //注意名字大小写，大写是类名\r\n        DataManager.Instance.enemies.push(woodenSkeletonManager);\r\n\r\n\r\n        const ironSkeleton = createUINode();\r\n        ironSkeleton.setParent(this.stage);\r\n        const ironSkeletonManager = ironSkeleton.addComponent(IronSkeletonManager);\r\n        await ironSkeletonManager.init({\r\n            x:1,\r\n            y:7,\r\n            type: ENTITY_TYPE_ENUM.SKELETON_IRON,\r\n            direction:DIRECTION_ENUM.TOP,\r\n            state:ENTITY_STATE_ENUM.IDLE\r\n        });\r\n        //注意名字大小写，大写是类名\r\n        DataManager.Instance.enemies.push(ironSkeletonManager);\r\n\r\n    }\r\n\r\n    adaptPos(){\r\n        //将舞台置为中间位置\r\n        //解包\r\n        const {mapRowCount, mapColumnCount} = DataManager.Instance;\r\n        const disX = TILE_WIDTH * mapRowCount/2;\r\n        const disY = TILE_HEIGHT * mapColumnCount/2 + 100;\r\n        this.stage.setPosition(-disX, disY);\r\n\r\n    }\r\n}\r\n\r\n\r\n"]}