{"version":3,"sources":["file:///E:/git/Cramped_Room_Of_Death/assets/scripts/scenes/BattleManager.ts"],"names":["_decorator","Component","director","Node","TileMapManager","levels","DataManager","TILE_HEIGHT","TILE_WIDTH","EventManager","ENTITY_STATE_ENUM","ENTITY_TYPE_ENUM","EVENT_ENUM","SCENE_ENUM","createUINode","PlayerManager","WoodenSkeletonManager","DoorManager","IronSkeletonManager","BurstManager","SpikeManager","SmokeManager","FadeManager","ShakeManager","ccclass","property","BattleManager","level","stage","_smokeLayer","_inited","onLoad","Instance","levelIndex","on","NEXT_LEVEL","_nextLevel","PLAYER_MOVE_END","_checkArrivedDoor","SHOW_SMOKE","generateSmoke","RECORD_STEP","record","REVOKE_STEP","revoke","RESTART_LEVEL","initLevel","OUT_BATTLE","outBattle","onDestroy","off","start","generateStage","console","log","node","getWorldPosition","fadeIn","mask","clearLevel","mapInfo","mapRowCount","length","mapColumnCount","Promise","all","generateTileMap","generateBurst","generateSpikes","generateSmokeLayer","generateDoor","generateEnemy","generatePlayer","fadeOut","player","door","x","playerX","y","playerY","doorX","doorY","state","doorState","DEATH","emit","destroyAllChildren","reset","setParent","addComponent","name","tileMap","tileMapManager","init","adaptPos","promise","bursts","forEach","burst","manger","push","playManager","PLAYER_BORN","spikes","spike","doorManager","enemies","enemy","Manger","type","SKELETON_WOODEN","direction","item","smokes","find","smoke","setPosition","smokeManager","IDLE","SMOKE","disX","disY","getComponent","stop","AIRDEATH","map","CurCount","records","pop","targetX","targetY","i","loadScene","Start"],"mappings":"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","sourcesContent":["import { _decorator, Component, director, Node } from 'cc';\r\nimport { TileMapManager } from '../tile/TileMapManager';\r\nimport levels, { ILevel } from '../../levels';\r\nimport DataManager, { IRecord } from '../../runtime/DataManager';\r\nimport { TILE_HEIGHT, TILE_WIDTH } from '../tile/TileManger';\r\nimport EventManager from '../../runtime/EventManager';\r\nimport { DIRECTION_ENUM, ENTITY_STATE_ENUM, ENTITY_TYPE_ENUM, EVENT_ENUM, SCENE_ENUM } from '../../enums';\r\nimport { createUINode } from '../../utils';\r\nimport { PlayerManager } from '../player/PlayerManager';\r\nimport { WoodenSkeletonManager } from '../woodenSkeleton/WoodenSkeletonManager';\r\nimport { DoorManager } from '../door/DoorManager';\r\nimport { IronSkeletonManager } from '../ironSkeleton/IronSkeletonManager';\r\nimport { BurstManager } from '../burst/BurstManager';\r\nimport { SpikeManager } from '../spikes/SpikeManager';\r\nimport { SmokeManager } from '../smoke/SmokeManager';\r\nimport FadeManager from '../../runtime/FadeManager';\r\nimport { ShakeManager } from '../ui/ShakeManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BattleManager')\r\nexport class BattleManager extends Component {\r\n    level:ILevel;\r\n    stage:Node;\r\n    //分层渲染的思想很重要\r\n    private _smokeLayer:Node;\r\n    private _inited:boolean = false;\r\n\r\n    //\r\n    onLoad(){\r\n        DataManager.Instance.levelIndex = 1;\r\n        //绑定切换关卡\r\n        EventManager.Instance.on(EVENT_ENUM.NEXT_LEVEL, this._nextLevel, this);\r\n        EventManager.Instance.on(EVENT_ENUM.PLAYER_MOVE_END, this._checkArrivedDoor, this);\r\n        EventManager.Instance.on(EVENT_ENUM.SHOW_SMOKE, this.generateSmoke, this);\r\n        EventManager.Instance.on(EVENT_ENUM.RECORD_STEP, this.record, this);\r\n        EventManager.Instance.on(EVENT_ENUM.REVOKE_STEP, this.revoke, this);\r\n        EventManager.Instance.on(EVENT_ENUM.RESTART_LEVEL, this.initLevel, this);\r\n        EventManager.Instance.on(EVENT_ENUM.OUT_BATTLE, this.outBattle, this);\r\n    }\r\n\r\n    onDestroy(){\r\n        //解绑切换关卡\r\n        EventManager.Instance.off(EVENT_ENUM.NEXT_LEVEL, this._nextLevel)\r\n        EventManager.Instance.off(EVENT_ENUM.PLAYER_MOVE_END, this._checkArrivedDoor);\r\n        EventManager.Instance.off(EVENT_ENUM.SHOW_SMOKE, this.generateSmoke);\r\n        EventManager.Instance.off(EVENT_ENUM.RECORD_STEP, this.record);\r\n        EventManager.Instance.off(EVENT_ENUM.REVOKE_STEP, this.revoke);\r\n        EventManager.Instance.off(EVENT_ENUM.RESTART_LEVEL, this.initLevel);\r\n        EventManager.Instance.off(EVENT_ENUM.OUT_BATTLE, this.outBattle, this);\r\n    }\r\n\r\n    start() {\r\n        this.generateStage();\r\n        this.initLevel();\r\n    }\r\n\r\n    async initLevel(){\r\n        const level = levels[`level${DataManager.Instance.levelIndex}`];\r\n        console.log(this.node.getWorldPosition());\r\n        if(level){\r\n            if(this._inited){\r\n                await FadeManager.Instance.fadeIn();\r\n            }\r\n            else{\r\n                await FadeManager.Instance.mask();\r\n            }\r\n            this.clearLevel();\r\n            this.level = level;\r\n            DataManager.Instance.mapInfo = this.level.mapInfo;\r\n            DataManager.Instance.mapRowCount = this.level.mapInfo.length || 0;\r\n            DataManager.Instance.mapColumnCount = this.level.mapInfo[0].length || 0;\r\n            \r\n            await Promise.all([\r\n                this.generateTileMap(),\r\n                this.generateBurst(),\r\n                this.generateSpikes(),\r\n                this.generateSmokeLayer(),\r\n                this.generateDoor(),\r\n                this.generateEnemy(),\r\n                this.generatePlayer()\r\n            ]);\r\n            //生成player\r\n            \r\n            \r\n            await FadeManager.Instance.fadeOut();\r\n            this._inited = true;\r\n        }\r\n    }\r\n\r\n\r\n    private _nextLevel(){\r\n        DataManager.Instance.levelIndex++;\r\n        this.initLevel();\r\n    }\r\n\r\n    //检测玩家是否到门，且敌人全部死亡\r\n    private _checkArrivedDoor(){\r\n        if(!DataManager.Instance.player || !DataManager.Instance.door) return;\r\n        let {x:playerX, y:playerY} = DataManager.Instance.player;\r\n        let {x:doorX, y:doorY, state:doorState} = DataManager.Instance.door;\r\n        \r\n        if(playerX === doorX && playerY === doorY && doorState === ENTITY_STATE_ENUM.DEATH){\r\n            EventManager.Instance.emit(EVENT_ENUM.NEXT_LEVEL);\r\n        }\r\n    }\r\n\r\n    clearLevel(){\r\n        //清空数据，销毁上一关地图后再加载下一关\r\n        this.stage.destroyAllChildren();\r\n        DataManager.Instance.reset();\r\n    }\r\n\r\n    generateStage(){\r\n        //创建舞台，所有单元放在舞台上\r\n        this.stage = new Node();\r\n        this.stage.setParent(this.node);\r\n        this.stage.addComponent(ShakeManager);\r\n        this.stage.name = \"stage\";\r\n    }\r\n\r\n\r\n    async generateTileMap(){\r\n        //创建瓦片地图节点\r\n        let tileMap = new Node();\r\n        tileMap.setParent(this.stage);\r\n\r\n        //执行生成逻辑，放在组件上\r\n        const tileMapManager = tileMap.addComponent(TileMapManager);\r\n        await tileMapManager.init();\r\n\r\n        //地图居中\r\n        this.adaptPos();\r\n    }\r\n\r\n\r\n    async generateBurst(){\r\n        let promise = [];\r\n        this.level.bursts.forEach((burst)=>{\r\n            const node = createUINode();\r\n            node.setParent(this.stage);\r\n            const manger = node.addComponent(BurstManager);\r\n            //使用promise，避免等一个创造一个\r\n            //可以一起等待，提高资源加载速度\r\n            promise.push(manger.init(burst));\r\n            //注意名字大小写，大写是类名\r\n            DataManager.Instance.bursts.push(manger); \r\n        })\r\n\r\n        await Promise.all(promise);\r\n    }\r\n\r\n    async generatePlayer(){\r\n        const player = createUINode();\r\n        player.setParent(this.stage);\r\n        const playManager = player.addComponent(PlayerManager);\r\n        await playManager.init(this.level.player);\r\n        DataManager.Instance.player = playManager;\r\n        EventManager.Instance.emit(EVENT_ENUM.PLAYER_BORN, true);\r\n        \r\n    }\r\n\r\n    async generateSpikes(){\r\n        let promise = [];\r\n        this.level.spikes.forEach((spike)=>{\r\n            const node = createUINode();\r\n            node.setParent(this.stage);\r\n            const manger = node.addComponent(SpikeManager);\r\n            //使用promise，避免等一个创造一个\r\n            //可以一起等待，提高资源加载速度\r\n            promise.push(manger.init(spike));\r\n            //注意名字大小写，大写是类名\r\n            DataManager.Instance.spikes.push(manger); \r\n        })\r\n        await Promise.all(promise);\r\n    }\r\n    async generateDoor(){\r\n        const door = createUINode();\r\n        door.setParent(this.stage);\r\n        const doorManager = door.addComponent(DoorManager);\r\n        await doorManager.init(this.level.door);\r\n        DataManager.Instance.door = doorManager;\r\n    }\r\n\r\n    async generateEnemy(){\r\n        let promise = [];\r\n        this.level.enemies.forEach((enemy)=>{\r\n            const node = createUINode();\r\n            node.setParent(this.stage);\r\n            const Manger = enemy.type === ENTITY_TYPE_ENUM.SKELETON_WOODEN ? WoodenSkeletonManager : IronSkeletonManager;\r\n            const manger = node.addComponent(Manger);\r\n            //使用promise，避免等一个创造一个\r\n            //可以一起等待，提高资源加载速度\r\n            promise.push(manger.init(enemy));\r\n            //注意名字大小写，大写是类名\r\n            DataManager.Instance.enemies.push(manger); \r\n        })\r\n\r\n        await Promise.all(promise);\r\n    }\r\n\r\n    async generateSmoke(x:number, y:number, direction:DIRECTION_ENUM){\r\n        //循环利用\r\n        const item = DataManager.Instance.smokes.find(smoke=>smoke.state === ENTITY_STATE_ENUM.DEATH);\r\n        if(item){\r\n            item.x = x;\r\n            item.y = y;\r\n            item.direction = direction;\r\n            //重新设置一下位置，保证烟雾生成的位置是实际希望的位置\r\n            this.node.setPosition(x * TILE_WIDTH - TILE_WIDTH * 1.5, -y * TILE_HEIGHT + TILE_HEIGHT * 1.5);\r\n            return;\r\n        }\r\n        \r\n        const smoke = createUINode();\r\n        smoke.setParent(this._smokeLayer);\r\n        const smokeManager = smoke.addComponent(SmokeManager);\r\n        await smokeManager.init({\r\n            x,\r\n            y,\r\n            direction,\r\n            state:ENTITY_STATE_ENUM.IDLE,\r\n            type:ENTITY_TYPE_ENUM.SMOKE\r\n        });\r\n        DataManager.Instance.smokes.push(smokeManager);\r\n    }\r\n\r\n    async generateSmokeLayer(){\r\n        this._smokeLayer = createUINode();\r\n        this._smokeLayer.setParent(this.stage);\r\n    }\r\n    adaptPos(){\r\n        //将舞台置为中间位置\r\n        //解包\r\n        const {mapRowCount, mapColumnCount} = DataManager.Instance;\r\n        const disX = TILE_WIDTH * mapRowCount/2;\r\n        const disY = TILE_HEIGHT * mapColumnCount/2 + 100;\r\n        //适配配置时取消震动\r\n        this.stage.getComponent(ShakeManager).stop();\r\n        this.stage.setPosition(-disX, disY);\r\n\r\n    }\r\n\r\n    record(){\r\n        const item:IRecord = {\r\n            player:{\r\n                x:DataManager.Instance.player.x,\r\n                y:DataManager.Instance.player.y,\r\n                type:DataManager.Instance.player.type,\r\n                direction:DataManager.Instance.player.direction,\r\n                state:\r\n                        DataManager.Instance.player.state === ENTITY_STATE_ENUM.IDLE ||\r\n                        DataManager.Instance.player.state === ENTITY_STATE_ENUM.DEATH ||\r\n                        DataManager.Instance.player.state === ENTITY_STATE_ENUM.AIRDEATH\r\n                        ? ENTITY_STATE_ENUM.IDLE : DataManager.Instance.player.state\r\n            },\r\n\r\n            door:{\r\n                x:DataManager.Instance.door.x,\r\n                y:DataManager.Instance.door.y,\r\n                type:DataManager.Instance.door.type,\r\n                direction:DataManager.Instance.door.direction,\r\n                state:DataManager.Instance.door.state,\r\n            },\r\n\r\n            enemies:DataManager.Instance.enemies.map(({x, y, direction, state, type})=>({\r\n                x,\r\n                y,\r\n                direction,\r\n                state,\r\n                type\r\n            })),\r\n\r\n            bursts:DataManager.Instance.bursts.map(({x, y, direction, state, type})=>({\r\n                x,\r\n                y,\r\n                direction,\r\n                state,\r\n                type\r\n            })),\r\n\r\n            spikes:DataManager.Instance.spikes.map(({x, y, type, CurCount})=>({\r\n                x,\r\n                y,\r\n                type,\r\n                CurCount\r\n            })),\r\n        }\r\n\r\n        DataManager.Instance.records.push(item);\r\n    }\r\n\r\n    revoke(){\r\n        const item = DataManager.Instance.records.pop();\r\n        if(item){\r\n            DataManager.Instance.player.x = DataManager.Instance.player.targetX = item.player.x;\r\n            DataManager.Instance.player.y = DataManager.Instance.player.targetY = item.player.y;\r\n            DataManager.Instance.player.state = item.player.state;\r\n            DataManager.Instance.player.direction = item.player.direction;\r\n\r\n            DataManager.Instance.door.x = item.door.x;\r\n            DataManager.Instance.door.y = item.door.y;\r\n            DataManager.Instance.door.state = item.door.state;\r\n            DataManager.Instance.door.direction = item.door.direction;\r\n\r\n            for(let i = 0; i < DataManager.Instance.enemies.length; i++){\r\n                const enemy = DataManager.Instance.enemies[i];\r\n                enemy.x = item.enemies[i].x;\r\n                enemy.y = item.enemies[i].y;\r\n                enemy.state = item.enemies[i].state;\r\n                enemy.direction = item.enemies[i].direction;\r\n            }\r\n\r\n            for(let i = 0; i < DataManager.Instance.bursts.length; i++){\r\n                const burst = DataManager.Instance.bursts[i];\r\n                burst.x = item.bursts[i].x;\r\n                burst.y = item.bursts[i].y;\r\n                burst.state = item.bursts[i].state;\r\n            }\r\n\r\n            for(let i = 0; i < DataManager.Instance.spikes.length; i++){\r\n                const spike = DataManager.Instance.spikes[i];\r\n                spike.x = item.spikes[i].x;\r\n                spike.y = item.spikes[i].y;\r\n                spike.type = item.spikes[i].type;\r\n                spike.CurCount = item.spikes[i].CurCount;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    async outBattle(){\r\n        await FadeManager.Instance.fadeIn();\r\n        director.loadScene(SCENE_ENUM.Start);\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n"]}